library('fspe')
library('zoo')
library(psych)
library(ggplot2)
library(dplyr)
library("tidyr")
library("tidyverse")
library("data.table")
library('mokken')
library('EFA.dimensions')
library(boot)
library('EFA.dimensions')
library('pheatmap')
library(mice)
library("ggcorrplot")
library('apaTables')
library("GGally")
library('RColorBrewer')
library('gplots')
library('readr')
library("readxl")
library(ggridges)
library(ggplot2)
library(viridis)
library('hrbrthemes')
library(viridis)
library(ggpubr)


#### LOAD RAW DATA, REMOVE ATTENTION CHECK FAILURES ####

# Load data with labels
raw <- read.csv("C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/MonashBrainAndBehavi-QuestionnaireToby_DATA_LABELS_2025-01-08_1107.csv")
rownames(raw) <- raw$Study.ID
#Accrue demographic info prior to cleaning
original_demographics <- raw[c('What.is.your.age.', 'Please.select.your.gender.', 'What.is.your.highest.level.of.education.')]
colnames(original_demographics) <- c('Age', 'Sex', 'Highest Level of Education')
original_demographics_count <- list()
original_demographics_count$`Percent Male` <- sum(original_demographics$Sex == 'Male') / nrow(original_demographics)*100
original_demographics_count$`Percent Female` <- sum(original_demographics$Sex == 'Female') / nrow(original_demographics)*100
original_demographics_count$`Percent Other Gender` <- sum(!(original_demographics$Sex %in% c('Female', 'Male', NA))) / nrow(original_demographics)*100
for (education_level in unique(original_demographics$`Highest Level of Education`)) {
  if (!is.na(education_level) && education_level != '') {
    percent <- sum(original_demographics$`Highest Level of Education` == education_level) / nrow(original_demographics) * 100
    column_name <- paste0("Percent ", education_level, ' Educated')
    original_demographics_count[[column_name]] <- percent
  }
}

sum(original_demographics$Sex=='Male')

original_demographics_count$`Average Age` <- mean(original_demographics$Age, na.rm = TRUE)
original_demographics_count$`Standard Deviation of Age` <- sd(original_demographics$Age, na.rm = TRUE)
original_demographics_count$`Total Sample Size` <- nrow(original_demographics)

original_demographics_count <- round(t(bind_rows(original_demographics_count)), 2)
colnames(original_demographics_count) <- 'Original Dataset'


# Set index and drop column
raw <- rename(raw, "Study ID" = "Study.ID")
raw <- raw[!duplicated(raw$`Study ID`), ]
raw <- raw[grepl("^MB", raw$`Study ID`, ignore.case = TRUE), ]
rownames(raw) <- raw$`Study ID`
raw <- raw[ , -1]

# Load scoring data (raw, numbered, unlabelled)
scoring <- read.csv("C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/MonashBrainAndBehavi-QuestionnaireToby_DATA_2025-01-08_1106.csv")
scoring <- rename(scoring, "Study ID" = "record_id")
scoring <- scoring[!duplicated(scoring$`Study ID`), ]
scoring <- scoring[grepl("^MB", scoring$`Study ID`, ignore.case = TRUE), ]
rownames(scoring) <- scoring$`Study ID`
scoring <- scoring[ , -1]

# Firstly, remove those who did not complete - 85% missing data
many_missing_rows_85 <- scoring[rowMeans(is.na(scoring)) >= 0.85, ]
incomplete_survey <- rownames(many_missing_rows_85)
scoring <- scoring[!(rownames(scoring) %in% incomplete_survey), ]
raw <- raw[!(rownames(raw) %in% incomplete_survey), ]
length(rownames(many_missing_rows_85))
# Remove people who fail the control questions
# Identify control columns
control_cols <- colnames(scoring)[grepl('con_', colnames(scoring))]

# Create the new DataFrame with the selected columns
control_df <- scoring[, control_cols]
rownames(control_df) <- rownames(scoring)

# If control isnt =1 (correct) or NA, then 0
control_df[control_df == ""] <- NA
control_df[control_df != 1 & !is.na(control_df)] <- 0

# Drop people with 85% missing vals
many_missing_rows <- control_df[rowMeans(is.na(control_df)) >= 0.85, ]
incomplete_attncheck <- rownames(many_missing_rows)
control_df <- control_df[!(rownames(control_df) %in% incomplete_attncheck), ]

control_df[] <- lapply(control_df, as.numeric)
control_cleaned <- control_df
# Calculate SumCorrect and SumIncorrect
control_cleaned$SumCorrect <- rowSums(control_cleaned, na.rm=T)
control_cleaned$SumIncorrect <- 20 - control_cleaned$SumCorrect

all_incorrect <- sum(control_cleaned$SumIncorrect == 20)


output_path <- "C:/Users/ctoby/Desktop/PHD Data/Chapter 3/attncheck.png"
png(filename = output_path, width = 648, height = 574)
boxplot(control_cleaned$SumIncorrect,
        main = "Boxplot Outlier Detection for Attention Check Fails",
        ylab = 'Frequency of Attention Check Fails')
# Close the graphics device
dev.off()

# Identify rows with any incorrect answers
any_incorrect <- control_cleaned[control_cleaned$SumIncorrect != 0, ]

# Get the row names
incorrect_row_names <- rownames(any_incorrect)

# Display the row names
print(incorrect_row_names)

# Count the number of participants with any incorrect answers
num_any_incorrect <- nrow(any_incorrect)

# Calculate quartiles and interquartile range
Q1 <- quantile(control_cleaned$SumIncorrect, 0.25, na.rm = TRUE)
Q3 <- quantile(control_cleaned$SumIncorrect, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1

# Identify outliers
lower_bound <- (Q1 - 1.5*IQR)
upper_bound <- (Q3 + 1.5*IQR)
outliers <- control_cleaned$SumIncorrect[(control_cleaned$SumIncorrect < lower_bound) | (control_cleaned$SumIncorrect > upper_bound)]
# Get the row names of outliers
outlier_row_names <- rownames(control_cleaned)[which(control_cleaned$SumIncorrect %in% outliers)]
# Display the row names of outliers
print(outlier_row_names)
length(outlier_row_names)

num_outliers <- length(outliers)

cat("Number of people with ANY incorrect:", num_any_incorrect, "\n")
cat("Number of outliers for control questions:", num_outliers, "\n")
cat("List of outliers and their numbers:", outlier_row_names, "\n")

#To copy and paste
cleaned_row_names <- sub("MBBP_", "", outlier_row_names)
for (i in cleaned_row_names) {
  print(cat(i))
}
paste(cleaned_row_names, collapse = " ")

#Drop outliers
scoring <- scoring[!(rownames(scoring) %in% outlier_row_names), ]
raw <- raw[!(rownames(raw) %in% outlier_row_names), ]
raw

rows_with_sex_nonbinary <- !raw$Please.select.your.gender. %in% c('Female', 'Male', NA)
nonbinary_row_names <- rownames(raw)[rows_with_sex_nonbinary]

cleaned_row_names <- sub("MBBP_", "", nonbinary_row_names)
for (i in cleaned_row_names) {
  print(cat(i))
}

raw <- raw[!(rownames(raw) %in% nonbinary_row_names), ]
scoring <- scoring[!(rownames(scoring) %in% nonbinary_row_names), ]

post_clean_demographics <- raw[c('What.is.your.age.', 'Please.select.your.gender.', 'What.is.your.highest.level.of.education.')]
colnames(post_clean_demographics) <- c('Age', 'Sex', 'Highest Level of Education')
post_clean_demographics_count <- list()
post_clean_demographics_count$`Percent Male` <- sum(post_clean_demographics$Sex == "Male", na.rm = TRUE) / nrow(post_clean_demographics)*100
post_clean_demographics_count$`Percent Female` <- sum(post_clean_demographics$Sex == 'Female', na.rm = TRUE) / nrow(post_clean_demographics)*100
post_clean_demographics_count$`Percent Other Gender` <- sum(!(post_clean_demographics$Sex %in% c('Female', 'Male', NA)), na.rm = TRUE) / nrow(post_clean_demographics)*100
for (education_level in unique(post_clean_demographics$`Highest Level of Education`)) {
  if (!is.na(education_level) && education_level != '') {
    percent <- sum(post_clean_demographics$`Highest Level of Education` == education_level, na.rm = TRUE) / nrow(post_clean_demographics) * 100
    column_name <- paste0("Percent ", education_level, ' Educated')
    post_clean_demographics_count[[column_name]] <- percent
  }
}

unique(post_clean_demographics$Sex)

post_clean_demographics_count$`Average Age` <- mean(post_clean_demographics$Age, na.rm = TRUE)
post_clean_demographics_count$`Standard Deviation of Age` <- sd(post_clean_demographics$Age, na.rm = TRUE)
post_clean_demographics_count$`Total Sample Size` <- nrow(post_clean_demographics)

post_clean_demographics_count <- round(t(bind_rows(post_clean_demographics_count)), 2)
colnames(post_clean_demographics_count) <- 'Post Cleaning'

demographics_table <- cbind(original_demographics_count, post_clean_demographics_count)
write.csv(demographics_table, "C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/demographics.csv")

#### end ####

#### THQ COMPS ####

raw <- raw %>%
  rename("THQ1.y.n" = "Has.anyone.ever.tried.to.take.something.from.you.by.using.force.or.the.threat.of.force..such.as.a.stick.up.or.mugging",
         "THQ2.y.n" = "Has.anyone.ever.attempted.to.rob.you.or.actually.robbed.you..ie...stolen.your.personal.belongings..",
         "THQ3.y.n" = "Has.anyone.ever.attempted.to.or.succeeded.in.breaking.into.your.home.when.you.were.not.there.",
         "THQ4.y.n" = "Has.anyone.ever.attempted.to.or.succeeded.in.breaking.into.your.home.while.you.were.there.",
         "THQ5.y.n" = "Have.you.ever.had.a.serious.accident.at.work..in.a.car..or.somewhere.else.",
         "THQ6.y.n" = "Have.you.ever.experienced.a.natural.disaster.such.as.a.tornado..hurricane..flood.or.major.earthquake..etc..where.you.felt.you.or.your.loved.ones.were.in.danger.of.death.or.injury.",
         "THQ7.y.n" = "Have.you.ever.experienced.a..man.made..disaster.such.as.a.train.crash..building.collapse..bank.robbery..fire..etc..where.you.felt.you.or.your.loved.ones.were.in.danger.of.death.or.injury.",
         "THQ8.y.n" = "Have.you.ever.been.in.any.other.situation.in.which.you.were.seriously.injured.",
         "THQ9.y.n" = "Have.you.ever.been.in.any.other.situation.in.which.you.feared.you.might.be.killed.or.seriously.injured.",
         "THQ10.y.n" = "Have.you.ever.seen.someone.seriously.injured.or.killed.",
         "THQ11.y.n" = "Have.you.ever.seen.dead.bodies..other.than.at.a.funeral..or.had.to.handle.dead.bodies.for.any.reason.",
         "THQ12.y.n" = "Have.you.ever.had.a.close.friend.or.family.member.murdered..or.killed.by.a.drunk.driver.",
         "THQ13.y.n" = "Have.you.ever.had.a.spouse..romantic.partner..or.child.die.",
         "THQ14.y.n" = "Have.you.ever.had.a.serious.or.life.threatening.illness.",
         "THQ15.y.n" = "Have.you.ever.received.news.of.a.serious.injury..life.threatening.illness..or.unexpected.death.of.someone.close.to.you.",
         "THQ16.y.n" = "Have.you.ever.had.to.engage.in.combat.while.in.military.service.in.an.official.or.unofficial.war.zone.",
         "THQ17.y.n" = "Has.anyone.ever.made.you.have.intercourse.or.oral.or.anal.sex.against.your.will.",
         "THQ18.y.n" = "Has.anyone.ever.touched.private.parts.of.your.body..or.made.you.touch.theirs..under.force.or.threat.",
         "THQ19.y.n" = "Other.than.the.two.previous.incidents.mentioned..have.there.been.any.other.situations.in.which.another.person.tried.to.force.you.to.have.an.unwanted.sexual.contact.",
         "THQ20.y.n" = "Has.anyone..including.family.members.or.friends..ever.attacked.you.with.a.gun..knife..or.some.other.weapon.",
         "THQ21.y.n" = "Has.anyone..including.family.members.or.friends..ever.attacked.you.without.a.weapon.and.seriously.injured.you.",
         "THQ22.y.n" = "Has.anyone.in.your.family.ever.beaten..spanked..or.pushed.you.hard.enough.to.cause.injury.",
         "THQ23.y.n" = "Have.you.ever.experienced.any.other.extraordinarily.stressful.situation.or.event.that.is.not.covered.above.")

trauma_frequencies <- raw[, grepl("Number.of.times", colnames(raw))]
colnames(trauma_frequencies)[1] <- 'THQFreq:1'
colnames(trauma_frequencies)[2] <- 'THQFreq:2'
colnames(trauma_frequencies)[3] <- 'THQFreq:3'
colnames(trauma_frequencies)[4] <- 'THQFreq:4'
colnames(trauma_frequencies)[5] <- 'THQFreq:5'
colnames(trauma_frequencies)[6] <- 'THQFreq:6'
colnames(trauma_frequencies)[7] <- 'THQFreq:7'
colnames(trauma_frequencies)[8] <- 'THQFreq:8'
colnames(trauma_frequencies)[9] <- 'THQFreq:9'
colnames(trauma_frequencies)[10] <- 'THQFreq:10'
colnames(trauma_frequencies)[11] <- 'THQFreq:11'
colnames(trauma_frequencies)[12] <- 'THQFreq:12'
colnames(trauma_frequencies)[13] <- 'THQFreq:13'
colnames(trauma_frequencies)[14] <- 'THQFreq:14'
colnames(trauma_frequencies)[15] <- 'THQFreq:15'
colnames(trauma_frequencies)[16] <- 'THQFreq:16'
colnames(trauma_frequencies)[17] <- 'THQFreq:17'
colnames(trauma_frequencies)[18] <- 'THQFreq:18'
colnames(trauma_frequencies)[19] <- 'THQFreq:19'
colnames(trauma_frequencies)[20] <- 'THQFreq:20'
colnames(trauma_frequencies)[21] <- 'THQFreq:21'
colnames(trauma_frequencies)[22] <- 'THQFreq:22'
colnames(trauma_frequencies)[23] <- 'THQFreq:23'
trauma_frequencies

#Merge data
raw_data_trama_freqs <- cbind(raw, trauma_frequencies)
rownames(raw_data_trama_freqs) <- rownames(raw)
raw_data_trama_freqs

#Drop THQ11 - dead bodies - issue with uni students (in qual data)
raw_data_trama_freqs <- raw_data_trama_freqs[, !(colnames(raw_data_trama_freqs) %in% c('THQFreq:11'))]
raw_data_trama_freqs <- raw_data_trama_freqs[, !(colnames(raw_data_trama_freqs) %in% c('THQ11.y.n'))]

#Compute a Trauma Total Score (for frequency)
raw_data_trama_freqs$Total_amount_of_trauma <- rowSums(
  sapply(raw_data_trama_freqs[, grepl("Freq", colnames(raw_data_trama_freqs))], as.numeric),
  na.rm = TRUE
)


#Do same for number of items
trauma_yn_cols <- raw_data_trama_freqs[, grepl("y.n$", colnames(raw_data_trama_freqs))]
trauma_yn_cols <- ifelse(trauma_yn_cols == 'Yes', 1, ifelse(trauma_yn_cols == 'No', 0, NA))

raw_data_trama_freqs$Number_of_Trauma_Types_Endorsed <- rowSums(trauma_yn_cols, na.rm = TRUE)
raw_data_trama_freqs$Number_of_Trauma_Types_Endorsed
hist(raw_data_trama_freqs$Number_of_Trauma_Types_Endorsed)


#SEXUAL TRAUMA#
sexual_yn_cols <- trauma_yn_cols[, c('THQ17.y.n', 'THQ18.y.n', 'THQ19.y.n')]
sexual_yn_cols

# Sum the values of sexual trauma columns and create a new column
raw_data_trama_freqs$ST_y_n_Total <- rowSums(sexual_yn_cols, na.rm = TRUE)

# Display the counts and create a histogram
hist(raw_data_trama_freqs$ST_y_n_Total)

sexual_freq_cols <- raw_data_trama_freqs[, c('THQFreq:17', 'THQFreq:18', 'THQFreq:19')]
sexual_freq_cols

# Calculate the sum of values along the rows and assign it to a new column
raw_data_trama_freqs$SexTrauma.FreqTotal <- rowSums(sexual_freq_cols, na.rm = TRUE)

# If 'SexTrauma:y/n Total' is 0, fill 'SexTrauma: Freq Total' with 0
raw_data_trama_freqs$SexTrauma.FreqTotal[raw_data_trama_freqs$ST_y_n_Total == 0] <- 0

#PHYSICAL TRAUMA#
physical_yn_cols <- trauma_yn_cols[, c('THQ1.y.n', 'THQ2.y.n', 'THQ4.y.n', 'THQ16.y.n', 'THQ20.y.n', 'THQ21.y.n', 'THQ22.y.n')]
physical_yn_cols

# Sum the values of physical trauma columns and create a new column
raw_data_trama_freqs$PhysViol_y_n_Total <- rowSums(physical_yn_cols, na.rm = TRUE)

physical_freq_cols <- raw_data_trama_freqs[, c('THQFreq:1', 'THQFreq:2', 'THQFreq:4', 'THQFreq:16', 'THQFreq:20', 'THQFreq:21', 'THQFreq:22')]
physical_freq_cols

# Calculate the sum of values along the rows and assign it to a new column
raw_data_trama_freqs$PhysViol.FreqTotal <- rowSums(physical_freq_cols, na.rm = TRUE)

# If 'Physical:y/n Total' is 0, fill 'Physical: Freq Total' with 0
raw_data_trama_freqs$PhysViol.FreqTotal[raw_data_trama_freqs$PhysViol_y_n_Total == 0] <- 0

hist(raw_data_trama_freqs$PhysViol.FreqTotal)

raw_data_trama_freqs['PhysViol.FreqTotal']

#GRIEF TRAUMA#
grief_yn_cols <- trauma_yn_cols[, c('THQ12.y.n', 'THQ13.y.n', 'THQ15.y.n')]
grief_yn_cols

# Sum the values of grief trauma columns and create a new column
raw_data_trama_freqs$GriefT_y_n_Total <- rowSums(grief_yn_cols, na.rm = TRUE)

grief_freq_cols <- raw_data_trama_freqs[, c('THQFreq:12', 'THQFreq:13', 'THQFreq:15')]
grief_freq_cols

# Calculate the sum of values along the rows and assign it to a new column
raw_data_trama_freqs$GriefT.FreqTotal <- rowSums(grief_freq_cols, na.rm = TRUE)

# If 'Grief:y/n Total' is 0, fill 'Grief: Freq Total' with 0
raw_data_trama_freqs$GriefT.FreqTotal[raw_data_trama_freqs$GriefT_y_n_Total == 0] <- 0


#DISASTER TRAUMA#
disaster_yn_cols <- trauma_yn_cols[, c('THQ5.y.n', 'THQ6.y.n', 'THQ7.y.n', 'THQ8.y.n', 'THQ9.y.n', 'THQ10.y.n', 'THQ14.y.n')]
disaster_yn_cols

# Sum the values of DISASTER trauma columns and create a new column
raw_data_trama_freqs$GenT_y_n_Total <- rowSums(disaster_yn_cols, na.rm = TRUE)

# Display the counts and create a histogram
hist(raw_data_trama_freqs$GenT_y_n_Total)

disaster_freq_cols <- raw_data_trama_freqs[, c('THQFreq:5', 'THQFreq:6', 'THQFreq:7', 'THQFreq:8', 'THQFreq:9', 'THQFreq:10', 'THQFreq:14')]
disaster_freq_cols

# Calculate the sum of values along the rows and assign it to a new column
raw_data_trama_freqs$GenT.FreqTotal <- rowSums(disaster_freq_cols, na.rm = TRUE)

# If 'GenT.FreqTotal:y/n Total' is 0, fill 'GenT.FreqTotal: Freq Total' with 0
raw_data_trama_freqs$GenT.FreqTotal[raw_data_trama_freqs$GenT_y_n_Total == 0] <- 0

### Compute First Ages ###
ages_trauma <- raw_data_trama_freqs[, grepl("event.time", colnames(raw_data_trama_freqs))]
ages_trauma

num_trauma_age_cols <- ncol(ages_trauma)
num_trauma_age_cols_grouped_into_items <- num_trauma_age_cols %/% 3

ages_trauma_with_min_max <- ages_trauma

for (i in 1:num_trauma_age_cols_grouped_into_items) {
  start_col <- (i - 1)*3 + 1
  end_col <- i*3

  # Calculate and store the minimum values
  ages_trauma_with_min_max[paste0("THQ", i, "MinAge")] <- apply(ages_trauma[start_col:end_col], 1, function(row) {
    if (length(row[!is.na(row)]) > 0) {
      return(min(row, na.rm = TRUE))
    } else {
      return(NA)
    }
  })
  ages_trauma_with_min_max[paste0("THQ", i, "MaxAge")] <- apply(ages_trauma[start_col:end_col], 1, function(row) {
    if (length(row[!is.na(row)]) > 0) {
      return(max(row, na.rm = TRUE))
    } else {
      return(NA)
    }
  })
}

ages_trauma_min <- ages_trauma_with_min_max[, grepl("MinAge", colnames(ages_trauma_with_min_max))]
ages_trauma_max <- ages_trauma_with_min_max[, grepl("MaxAge", colnames(ages_trauma_with_min_max))]

# Remove columns containing "THQ11"
ages_trauma_min <- as.data.frame(ages_trauma_min[, !grepl("THQ11", colnames(ages_trauma_min))])
ages_trauma_max <- as.data.frame(ages_trauma_max[, !grepl("THQ11", colnames(ages_trauma_max))])

ages_trauma_min

### Phys Abuse first and last ages ###
phys_min_age_cols <- ages_trauma_min[, c('THQ1MinAge', 'THQ16MinAge', 'THQ2MinAge', 'THQ4MinAge', 'THQ20MinAge', 'THQ21MinAge', 'THQ22MinAge')]
phys_max_age_cols <- ages_trauma_max[, c('THQ1MaxAge', 'THQ16MaxAge', 'THQ2MaxAge', 'THQ4MaxAge', 'THQ20MaxAge', 'THQ21MaxAge', 'THQ22MaxAge')]

raw_data_trama_freqs$'PhysViol.FirstAge' <- apply(phys_min_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(min(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs$PhysViol.MostRecentAge <- apply(phys_max_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(max(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})
raw_data_trama_freqs['PhysViol.FirstAge']
raw_data_trama_freqs['PhysViol.MostRecentAge']

### Sex Abuse first and last ages ###
sex_min_age_cols <- ages_trauma_min[,c('THQ17MinAge', 'THQ18MinAge', 'THQ19MinAge')]
sex_max_age_cols <- ages_trauma_max[,c('THQ17MaxAge', 'THQ18MaxAge', 'THQ19MaxAge')]

sex_min_age_cols

raw_data_trama_freqs$'SexTrauma.FirstAge' <- apply(sex_min_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(min(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs$SexTrauma.MostRecentAge <- apply(sex_max_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(max(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs['SexTrauma.FirstAge']
raw_data_trama_freqs['SexTrauma.MostRecentAge']


### Grief Abuse first and last ages ###
grief_min_age_cols <- ages_trauma_min[c('THQ12MinAge', 'THQ13MinAge', 'THQ15MinAge')]
grief_max_age_cols <- ages_trauma_max[c('THQ12MaxAge', 'THQ13MaxAge', 'THQ15MaxAge')]

raw_data_trama_freqs$'GriefT.FirstAge' <- apply(grief_min_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(min(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs$GriefT.MostRecentAge <- apply(grief_max_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(max(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})


raw_data_trama_freqs['GriefT.FirstAge']
raw_data_trama_freqs['GriefT.MostRecentAge']

### Disaster Abuse first and last ages ###
disaster_min_age_cols <- ages_trauma_min[c('THQ5MinAge',  'THQ6MinAge', 'THQ7MinAge', 'THQ8MinAge', 'THQ9MinAge', 'THQ10MinAge', 'THQ14MinAge')]
disaster_max_age_cols <- ages_trauma_max[c('THQ5MaxAge',  'THQ6MaxAge', 'THQ7MaxAge', 'THQ8MaxAge', 'THQ9MaxAge', 'THQ10MaxAge')]

raw_data_trama_freqs$'GenT.FirstAge' <- apply(disaster_min_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(min(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs$GenT.MostRecentAge <- apply(disaster_max_age_cols, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(max(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs['GenT.FirstAge']
raw_data_trama_freqs['GenT.MostRecentAge']


#Also need to compute for ALL trauma

all_trauma_first_ages = raw_data_trama_freqs[c('GenT.FirstAge', 'SexTrauma.FirstAge', 'PhysViol.FirstAge', 'GriefT.FirstAge')]
all_trauma_mostrecentages = raw_data_trama_freqs[c('GenT.MostRecentAge', 'SexTrauma.MostRecentAge', 'PhysViol.MostRecentAge', 'GriefT.MostRecentAge')]


raw_data_trama_freqs$AllTrauma.FirstAge <- apply(all_trauma_first_ages, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(min(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})


raw_data_trama_freqs$AllTrauma.MostRecentAge <- apply(all_trauma_mostrecentages, 1, function(row) {
  if (length(row[!is.na(row)]) > 0) {
    return(min(row, na.rm = TRUE))
  } else {
    return(NA)
  }
})

raw_data_trama_freqs$AllTrauma.FreqTotal <- rowSums(raw_data_trama_freqs[, c("GenT.FreqTotal", "SexTrauma.FreqTotal", "PhysViol.FreqTotal", "GriefT.FreqTotal")], na.rm = TRUE)

raw_data_trama_freqs['AllTrauma.FirstAge']
raw_data_trama_freqs['AllTrauma.MostRecentAge']
raw_data_trama_freqs['AllTrauma.FreqTotal']


# Need to add -1s when people have experienced no trauma - to their age of first traumatic experience data
raw_data_trama_freqs$`AllTrauma.FirstAge` <- ifelse(raw_data_trama_freqs$`AllTrauma.FreqTotal` == 0, -1, raw_data_trama_freqs$`AllTrauma.FirstAge`)
raw_data_trama_freqs$'GenT.FirstAge' <- ifelse(raw_data_trama_freqs$`GenT_y_n_Total` == 0, -1, raw_data_trama_freqs$`GenT.FirstAge`)
raw_data_trama_freqs$'SexTrauma.FirstAge' <- ifelse(raw_data_trama_freqs$`ST_y_n_Total` == 0, -1, raw_data_trama_freqs$`SexTrauma.FirstAge`)
raw_data_trama_freqs$'PhysViol.FirstAge' <- ifelse(raw_data_trama_freqs$`PhysViol_y_n_Total` == 0, -1, raw_data_trama_freqs$`PhysViol.FirstAge`)
raw_data_trama_freqs$'GriefT.FirstAge' <- ifelse(raw_data_trama_freqs$`GriefT_y_n_Total` == 0, -1, raw_data_trama_freqs$`GriefT.FirstAge`)

raw_data_trama_freqs['PhysViol.FirstAge']
raw_data_trama_freqs['GenT.FirstAge']

#### end ####

#### SES COMPS ####

# Load data to cross reference against for SES
earnings_education <- read_excel("C:/Users/ctoby/Desktop/PHD Data/MBBPDATA/ABS Data for SES/Median weekly earnings, by highest educational qualification.xlsx")
earnings_industry <- read_excel("C:/Users/ctoby/Desktop/PHD Data/MBBPDATA/ABS Data for SES/Median weekly earnings, by industry.xlsx")


### Compute SES for Participant ###
index_for_data <- rownames(raw_data_trama_freqs)


raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant <- raw_data_trama_freqs$`What.is.your.highest.level.of.education.`

#If highest educ is school, then force when did you leave school into highest educ
raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant <- ifelse(raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant == 'Secondary',
                                                                             raw_data_trama_freqs[, grep("When.did.you.leave.high.school..", colnames(raw_data_trama_freqs))],
                                                                             raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant)

raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant <- ifelse(raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant == 'Primary',
                                                                             raw_data_trama_freqs[, grep("When.did.you.leave.high.school..", colnames(raw_data_trama_freqs))],
                                                                             raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant)

raw_data_trama_freqs$Coded_Level_of_Education_Particip <- raw_data_trama_freqs$Combined_School_info_Highest_Educ_Participant
raw_data_trama_freqs$Coded_Level_of_Education_Particip <- ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == 'PhD', 10,
                                                                 ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == 'Masters', 9,
                                                                        ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == c('Graduate Diploma', 'Bachelor with Honours'), 8,
                                                                               ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip %in% c('Bachelor'), 7,
                                                                                      ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == 'TAFE/National Certificate/Diploma', 5,
                                                                                             ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip %in% c(12, 11, 10), .5,
                                                                                                    ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip %in% c(9, 8, '8 or less'), .25,
                                                                                                           ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == "Unsure/don't know", NA, NA))))))))


raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip <- raw_data_trama_freqs$Coded_Level_of_Education_Particip
raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip <- ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip %in% c(10, 9), 90844,
                                                                ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip == 8, 83200,
                                                                       ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip == 7, 74256,
                                                                              ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip == 5, 60000,
                                                                                     ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Particip %in% c(.5, .25), 46800, NA)))))

#Match the industry by the ABS data
raw_data_trama_freqs$original_index <- seq_len(nrow(raw_data_trama_freqs))
raw_data_trama_freqs <- merge(raw_data_trama_freqs,
                              earnings_industry,
                              by.x = "What.is.your.primary.occupation.",
                              by.y = "Median weekly earnings, by industry",
                              all.x = TRUE, sort= FALSE)
raw_data_trama_freqs <- raw_data_trama_freqs[order(raw_data_trama_freqs$original_index), ]
raw_data_trama_freqs$original_index <- NULL

rownames(raw_data_trama_freqs) <- index_for_data

# Create a new column 'Avg Income Occup - Particip' and assign values from 'Aug 21 Annual Inc'
raw_data_trama_freqs['Avg_Income_Occup_Particip'] <- raw_data_trama_freqs['Aug 21 Annual Inc']

#Compute overall average income column
raw_data_trama_freqs['Avg_Income_OVERALL_Particip'] <- rowMeans(raw_data_trama_freqs[, c('Avg_Income_Occup_Particip', 'Avg_Income_Highest_Educ_Particip')], na.rm = TRUE)

#Compute participant SES
participant_ses_components <- c('Coded_Level_of_Education_Particip', 'Avg_Income_OVERALL_Particip')

# Scale the selected columns
scaled_participant_ses_components_averaged <- scale(raw_data_trama_freqs[, participant_ses_components], center = TRUE, scale = TRUE)

# Calculate the mean along the rows
raw_data_trama_freqs$ParticipantSES <- rowMeans(scaled_participant_ses_components_averaged)


### Compute SES for Parent1 ###
raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1 <- raw_data_trama_freqs$`What.is.your.mother.s.highest.level.of.education.`

raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1 <- ifelse(raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1 == 'Secondary',
                                                                         raw_data_trama_freqs[, grep("When.did.you.mother.leave.high.school..", colnames(raw_data_trama_freqs))],
                                                                         raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1)

raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1 <- ifelse(raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1 == 'Primary',
                                                                         raw_data_trama_freqs[, grep("When.did.you.mother.leave.high.school..", colnames(raw_data_trama_freqs))],
                                                                         raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1)


raw_data_trama_freqs$Coded_Level_of_Education_Parent1 <- raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent1
raw_data_trama_freqs$Coded_Level_of_Education_Parent1 <- ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 == 'PhD', 10,
                                                                ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 == 'Masters', 9,
                                                                       ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 == c('Graduate Diploma', 'Bachelor with Honours'), 8,
                                                                              ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 %in% c('Bachelor'), 7,
                                                                                     ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 == 'TAFE/National Certificate/Diploma', 5,
                                                                                            ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 %in% c(12, 11, 10), .5,
                                                                                                   ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent1 %in% c(9, 8, '8 or less'), .25,
                                                                                                          ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == "Unsure/don't know", NA, NA))))))))


raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 <- raw_data_trama_freqs$Coded_Level_of_Education_Parent1
raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 <- ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 %in% c(10, 9), 90844,
                                                               ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 == 8, 83200,
                                                                      ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 == 7, 74256,
                                                                             ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 == 5, 60000,
                                                                                    ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1 %in% c(.5, .25), 46800, NA)))))
raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent1

#Match the industry by the ABS data
raw_data_trama_freqs$original_index <- seq_len(nrow(raw_data_trama_freqs))
raw_data_trama_freqs <- merge(raw_data_trama_freqs,
                              earnings_industry,
                              by.x = "What.is.your.mother.s.primary.occupation.",
                              by.y = "Median weekly earnings, by industry",
                              all.x = TRUE, sort= FALSE)
raw_data_trama_freqs <- raw_data_trama_freqs[order(raw_data_trama_freqs$original_index), ]
raw_data_trama_freqs$original_index <- NULL
rownames(raw_data_trama_freqs) <- index_for_data

# Create a new column 'Avg Income Occup - Parent1' and assign values from 'Aug 21 Annual Inc'
raw_data_trama_freqs['Avg_Income_Occup_Parent1'] <- raw_data_trama_freqs['Aug 21 Annual Inc.y']

#Compute overall average income column
raw_data_trama_freqs['Avg_Income_OVERALL_Parent1'] <- rowMeans(raw_data_trama_freqs[, c('Avg_Income_Occup_Parent1', 'Avg_Income_Highest_Educ_Parent1')], na.rm = TRUE)
raw_data_trama_freqs['Avg_Income_OVERALL_Parent1']

#Compute parent1 SES
parent1_ses_components <- c('Coded_Level_of_Education_Parent1', 'Avg_Income_OVERALL_Parent1')

# Scale the selected columns
scaled_parent1_ses_components_averaged <- scale(raw_data_trama_freqs[, parent1_ses_components], center = TRUE, scale = TRUE)

# Calculate the mean along the rows
raw_data_trama_freqs$Parent1_SES <- rowMeans(scaled_parent1_ses_components_averaged)

### Compute SES for Parent2 ###
raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2 <- raw_data_trama_freqs$`What.is.your.father.s.highest.level.of.education.`

raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2 <- ifelse(raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2 == 'Secondary',
                                                                         raw_data_trama_freqs[, grep("When.did.you.father.leave.high.school..", colnames(raw_data_trama_freqs))],
                                                                         raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2)

raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2 <- ifelse(raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2 == 'Primary',
                                                                         raw_data_trama_freqs[, grep("When.did.you.father.leave.high.school..", colnames(raw_data_trama_freqs))],
                                                                         raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2)



raw_data_trama_freqs$Coded_Level_of_Education_Parent2 <- raw_data_trama_freqs$Combined_School_info_Highest_Educ_Parent2
raw_data_trama_freqs$Coded_Level_of_Education_Parent2 <- ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 == 'PhD', 10,
                                                                ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 == 'Masters', 9,
                                                                       ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 == c('Graduate Diploma', 'Bachelor with Honours'), 8,
                                                                              ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 %in% c('Bachelor'), 7,
                                                                                     ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 == 'TAFE/National Certificate/Diploma', 5,
                                                                                            ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 %in% c(12, 11, 10), .5,
                                                                                                   ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Parent2 %in% c(9, 8, '8 or less'), .25,
                                                                                                          ifelse(raw_data_trama_freqs$Coded_Level_of_Education_Particip == "Unsure/don't know", NA, NA))))))))


raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 <- raw_data_trama_freqs$Coded_Level_of_Education_Parent2
raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 <- ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 %in% c(10, 9), 90844,
                                                               ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 == 8, 83200,
                                                                      ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 == 7, 74256,
                                                                             ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 == 5, 60000,
                                                                                    ifelse(raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2 %in% c(.5, .25), 46800, NA)))))
raw_data_trama_freqs$Avg_Income_Highest_Educ_Parent2


#Match the industry by the ABS data
raw_data_trama_freqs$original_index <- seq_len(nrow(raw_data_trama_freqs))
raw_data_trama_freqs <- merge(raw_data_trama_freqs,
                              earnings_industry,
                              by.x = "What.is.your.father.s.primary.occupation.",
                              by.y = "Median weekly earnings, by industry",
                              all.x = TRUE, sort= FALSE)
raw_data_trama_freqs <- raw_data_trama_freqs[order(raw_data_trama_freqs$original_index), ]
raw_data_trama_freqs$original_index <- NULL

rownames(raw_data_trama_freqs) <- index_for_data


# Create a new column 'Avg Income Occup - Particip' and assign values from 'Aug 21 Annual Inc'
raw_data_trama_freqs['Avg_Income_Occup_Parent2'] <- raw_data_trama_freqs['Aug 21 Annual Inc']
raw_data_trama_freqs['Avg_Income_Occup_Parent2']


#Compute overall average income column
raw_data_trama_freqs['Avg_Income_OVERALL_Parent2'] <- rowMeans(raw_data_trama_freqs[, c('Avg_Income_Occup_Parent2', 'Avg_Income_Highest_Educ_Parent2')], na.rm = TRUE)

#Compute participant SES
Parent2_ses_components <- c('Coded_Level_of_Education_Parent2', 'Avg_Income_OVERALL_Parent2')

# Scale the selected columns
scaled_Parent2_ses_components_averaged <- scale(raw_data_trama_freqs[, Parent2_ses_components], center = TRUE, scale = TRUE)

# Calculate the mean along the rows
raw_data_trama_freqs$Parent2_SES <- rowMeans(scaled_Parent2_ses_components_averaged)

hist(raw_data_trama_freqs$Parent2_SES)


### FamilySES ###
Family_ses_components <- c('Parent1_SES', 'Parent2_SES')

# Calculate the mean along the rows
raw_data_trama_freqs$FamilySES <- rowMeans(raw_data_trama_freqs[, c('Parent1_SES', 'Parent2_SES')], na.rm = TRUE)

#Plot against WASI
WASI <- read.csv("C:\\Users\\ctoby\\Desktop\\PHD Data\\NEWEST BEH DATA\\WASI.csv", header = TRUE)
rownames(WASI) <- WASI$Study.ID
raw_data_trama_freqs$rownames <- rownames(raw_data_trama_freqs)
SES_WASI_Test <- merge(raw_data_trama_freqs, WASI, by.x = "rownames", by.y = "Study.ID", all.x = TRUE)
# Calculate Spearman correlations
spearman_cor_fam <- cor.test(SES_WASI_Test$FamilySES, SES_WASI_Test$Full.Scale.2...Composite.Score, method = "spearman")
spearman_cor_particip <- cor.test(SES_WASI_Test$ParticipantSES, SES_WASI_Test$Full.Scale.2...Composite.Score, method = "spearman")

# Create the scatter plot with regression lines
wasi_ses <- ggplot(data = SES_WASI_Test) +
  geom_point(aes(x = FamilySES, y = Full.Scale.2...Composite.Score, alpha=.1)) +
  #geom_smooth(aes(x = FamilySES, y = Full.Scale.2...Composite.Score), method = "rlm", se = T, color = "black", linewidth=1.5) +
  geom_point(aes(x = ParticipantSES, y = Full.Scale.2...Composite.Score), color = "red", alpha=.1) +
  #geom_smooth(aes(x = ParticipantSES, y = Full.Scale.2...Composite.Score), method = "rlm", , se = TRUE, color = "red", linetype = "dashed", linewidth=1.5) +
  annotate("label", x = max(SES_WASI_Test$FamilySES, na.rm = TRUE),
           y = max(SES_WASI_Test$Full.Scale.2...Composite.Score, na.rm = TRUE),
           label = sprintf("Family SES (black):\np = %.3f\nSpearman's rho = %.2f\n\nParticipant SES (red):\np = %.3f\nSpearman's rho = %.2f",
                           round(spearman_cor_fam$p.value, 3),
                           round(spearman_cor_fam$estimate, 2),
                           round(spearman_cor_particip$p.value, 3),
                           round(spearman_cor_particip$estimate, 2)),
           hjust = 1, vjust = 1, size = 3) +
  labs(x = "SES", y = "WASI-II Composite") +
  guides(alpha = "none") +
  theme_minimal()

# Print the plot
print(wasi_ses)

ggsave(filename = "wasi_ses_plot.png",
       plot = wasi_ses,
       path = "C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication",
       width = 8,
       height = 6,
       dpi = 300)

#Now for trauma total
# Calculate Spearman correlations
spearman_cor_fam <- cor.test(raw_data_trama_freqs$FamilySES, raw_data_trama_freqs$Total_amount_of_trauma, method = "spearman")
spearman_cor_particip <- cor.test(raw_data_trama_freqs$ParticipantSES, raw_data_trama_freqs$Total_amount_of_trauma, method = "spearman")

# Create the scatter plot with regression lines
trauma_ses <- ggplot(data = raw_data_trama_freqs) +
  geom_point(aes(x = FamilySES, y = Total_amount_of_trauma), alpha = 0.1) +
  #geom_smooth(aes(x = FamilySES, y = Total_amount_of_trauma), method = "rlm", se = TRUE, color = "black") +
  geom_point(aes(x = ParticipantSES, y = Total_amount_of_trauma), color = "red", alpha = 0.1) +
  #geom_smooth(aes(x = ParticipantSES, y = Total_amount_of_trauma), method = "rlm", se = TRUE, color = "red", linetype = "dashed") +
  annotate("label", x = max(raw_data_trama_freqs$FamilySES, na.rm = TRUE),
           y = 10,
           label = sprintf("Family SES (black):\np = %.3f\nSpearman's rho = %.2f\n\nParticipant SES (red):\np = %.3f\nSpearman's rho = %.2f",
                           round(spearman_cor_fam$p.value, 3),
                           round(spearman_cor_fam$estimate, 2),
                           round(spearman_cor_particip$p.value, 3),
                           round(spearman_cor_particip$estimate, 2)),
           hjust = 1, vjust = 1, size = 3) +
  labs(x = "SES", y = "Trauma total (THQ)") +
  ylim(0, 10) +
  guides(alpha = "none") +  # Turn off the alpha guide
  theme_minimal()

print(trauma_ses)
ggsave(filename = "trauma_ses.png",
       plot = trauma_ses,
       path = "C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication",
       width = 8,
       height = 6,
       dpi = 300)


#### end ####

#### Merging SES, THQ comps, sex and age ####

demographic_cols <- c('ParticipantSES',
                      'FamilySES',
                      'AllTrauma.FirstAge',
                      'GenT.FirstAge',
                      'SexTrauma.FirstAge',
                      'PhysViol.FirstAge',
                      'GriefT.FirstAge',
                      'AllTrauma.FreqTotal',
                      'GenT.FreqTotal',
                      'SexTrauma.FreqTotal',
                      'PhysViol.FreqTotal',
                      'GriefT.FreqTotal')

demographics <- raw_data_trama_freqs[demographic_cols]
demographics['FamilySES']

#Add Age and Sex
demographics['Sex'] <- raw_data_trama_freqs['Please.select.your.gender.']
demographics['Age'] <- raw_data_trama_freqs['What.is.your.age.']

#Recode sex according to https://pubmed.ncbi.nlm.nih.gov/15297898/
demographics$Sex[demographics$Sex == 'Male'] <- -.5
demographics$Sex[demographics$Sex == 'Female'] <- .5
demographics$Sex <- as.numeric(demographics$Sex)

cormat <-cor(demographics, use='complete.obs', method='spearman')
pheatmap(cormat,
         color = viridis(100),
         main = "Spearman Correlation Heatmap",
         breaks = seq(-0.3, 0.4, length.out = 101),
         fontsize = 8,
         cellwidth = 15,
         cellheight = 15)

length(demographics$Sex[demographics$Sex == 1])
mean(demographics[['Age']])
sd(demographics[['Age']])

#### end ####

#### Loading of CATPD data, dropping of nongender conforming + attention check failures ####
#Load the derived scores now. These have been precomputed in RedCap

# Read CSV file
derived_scores <- read.csv("C:\\Users\\ctoby\\Desktop\\PHD Data\\NEWEST BEH DATA\\MonashBrainAndBehavi-DerivedScores_DATA_LABELS_2025-01-08_0951.csv", header = TRUE)

#Hists for Jeg and Alex
getwd()
pdf("histograms.pdf")
hist(derived_scores$esi_alcoholproblem)
hist(derived_scores$esi_alcoholuse)
hist(derived_scores$esi_marijuanause)
hist(derived_scores$esi_marijuanaproblems)
hist(derived_scores$esi_druguse)
hist(derived_scores$esi_drugproblems)
hist(derived_scores$cius_total)
hist(derived_scores$cbs_total)
hist(derived_scores$pgsi_total)
hist(derived_scores$sps_r_total)
hist(derived_scores$mgh_hps_total)

dev.off()


derived_scores <- rename(derived_scores, "Study ID" = "Study.ID")
derived_scores <- derived_scores[!duplicated(derived_scores$`Study ID`), ]
derived_scores <- derived_scores[grepl("^MB", derived_scores$`Study ID`, ignore.case = TRUE), ]
rownames(derived_scores) <- derived_scores$`Study ID`
derived_scores <- derived_scores[ , -1]

#For all catpd subscales
cat_pd_subscales <- derived_scores[, grepl("cat_pd_", colnames(derived_scores))]

#For BFI
bfi2_subscales <- derived_scores[, grepl("bfi2", colnames(derived_scores))]

#Combine catpd with bfi2
cat_pd_subscales_with_bfi <- cbind(cat_pd_subscales, bfi2_subscales)

#Drop outliers in attention checks as we did with the raw data above for trauma and ses comps
cat_pd_subscales_with_bfi <- cat_pd_subscales_with_bfi[!(rownames(cat_pd_subscales_with_bfi) %in% nonbinary_row_names), ]
cat_pd_subscales_with_bfi <- cat_pd_subscales_with_bfi[!(rownames(cat_pd_subscales_with_bfi) %in% outlier_row_names), ]
cat_pd_subscales_with_bfi <- cat_pd_subscales_with_bfi[!(rownames(cat_pd_subscales_with_bfi) %in% incomplete_survey),]
# Count and print the number of rows with missing values
num_rows_with_missing_values <- sum(apply(cat_pd_subscales_with_bfi, 1, anyNA))
print(num_rows_with_missing_values)

# Visualize the number of missing values per row
num_missing_per_row <- rowSums(is.na(cat_pd_subscales_with_bfi))
plot(num_missing_per_row)

#We will test across some configurations of BassAck Structure:
#CATPD Alone
#CATPD with Big 5
#Consider dropping Openness to Experience due to low evidence of crosswalk with FFM of PD
#CATPD with Big 5 Facets
#Consider dropping facets assoc with Openness to Experience

#For all catpd subscales
cat_pd_subscales_no_bfi <- cat_pd_subscales_with_bfi[, grepl("cat_pd_", colnames(cat_pd_subscales_with_bfi))]
colnames(cat_pd_subscales_no_bfi)

#For BFI all big subscales
bfi2_subscales_big_five <- cat_pd_subscales_with_bfi[, c('bfi2_extraversion', 'bfi2_agreeableness', 'bfi2_conscientiousness', 'bfi2_negativeemotionality', 'bfi2_openness')]
colnames(bfi2_subscales_big_five)

#For BFI all big subscales MINUS OPENNESS
bfi2_subscales_big_five_no_openness <- cat_pd_subscales_with_bfi[, c('bfi2_extraversion', 'bfi2_agreeableness', 'bfi2_conscientiousness', 'bfi2_negativeemotionality')]
colnames(bfi2_subscales_big_five_no_openness)

#For BFI all facets
bfi2_subscales_facets <- cat_pd_subscales_with_bfi[, grepl("^bfi2_", colnames(cat_pd_subscales_with_bfi)) & !colnames(cat_pd_subscales_with_bfi) %in% colnames(bfi2_subscales_big_five)]
colnames(bfi2_subscales_facets)

#For BFI all facets MINUS OPENNESS RELATED
bfi2_subscales_facets_no_openness <- bfi2_subscales_facets[, !(names(bfi2_subscales_facets) %in% c('bfi2_curiosity', 'bfi2_sensitivity', 'bfi2_imagination'))]
colnames(bfi2_subscales_facets_no_openness)

catpd_with_bigfive <- cbind(cat_pd_subscales_no_bfi, bfi2_subscales_big_five)
catpd_with_bigfive_no_open <- cbind(cat_pd_subscales_no_bfi, bfi2_subscales_big_five_no_openness)
catpd_with_facets <- cbind(cat_pd_subscales_no_bfi, bfi2_subscales_facets)
catpd_with_facets_no_open <- cbind(cat_pd_subscales_no_bfi, bfi2_subscales_facets_no_openness)
cat_pd_subscales_no_bfi


#### end ####

#### PTSD SCID Rates ####
module_L <- read.csv("C:/Users/ctoby/Desktop/PHD Data/Chapter 3/PTSD.csv")
module_L$X61.Posttraumatic.Stress.Disorder..Lifetime.[module_L$X61.Posttraumatic.Stress.Disorder..Lifetime. == 2] <- 3
PTSDLifetimeVector <- as.data.frame(module_L$X61.Posttraumatic.Stress.Disorder..Lifetime.)
colnames(PTSDLifetimeVector) <- 'LifetimePTSD'
rownames(PTSDLifetimeVector) <- module_L$Participant.ID
PTSDLifetimeVector <- as.data.frame(PTSDLifetimeVector[rownames(PTSDLifetimeVector) %in% rownames(cat_pd_subscales_no_bfi), ])
PTSDLifetimeVector <- drop_na(PTSDLifetimeVector)
percentlifetimeptsd <- sum(PTSDLifetimeVector == 3, na.rm = TRUE)/length(rownames(PTSDLifetimeVector))

#### end ####

#### Rename CATPD and BFI-II Items ####
catpd_with_bigfive_no_open <- catpd_with_bigfive_no_open
colnames(catpd_with_bigfive_no_open) <- colnames(catpd_with_bigfive_no_open) %>%
  gsub("cat_pd_", "CAT-PD ", .) %>%
  gsub("bfi2_", "BFI-II ", .) %>%
  gsub("liability", "Lability", .) %>%
  gsub("extraversion", "Extraversion", .) %>%
  gsub("unusualbeliefs", "Unusual Beliefs", .) %>%
  gsub("anxiousness", "Anxiousness", .) %>%
  gsub("depressiveness", "Depressiveness", .) %>%
  gsub("exhibitionism", "Exhibitionism", .) %>%
  gsub("manipulativeness", "Manipulativeness", .) %>%
  gsub("nonplanfulness", "Non-planfulness", .) %>%
  gsub("perfectionism", "Perfectionism", .) %>%
  gsub("risktaking", "Risk-taking", .) %>%
  gsub("selfharm", "Self-harm", .) %>%
  gsub("negativeemotionality", "Negative Emotionality", .) %>%
  gsub("anger", "Anger", .) %>%
  gsub("callousness", "Callousness", .) %>%
  gsub("domineering", "Domineering", .) %>%
  gsub("healthanxiety", "Health Anxiety", .) %>%
  gsub("fantasyproneness", "Fantasy Proneness", .) %>%
  gsub("hostileaggression", "Hostile Aggression", .) %>%
  gsub("relationshipinsecurity", "Relationship Insecurity", .) %>%
  gsub("normviolation", "Norm Violation", .) %>%
  gsub("romanticdisinterest", "Romantic Disinterest", .) %>%
  gsub("misstrust", "Misstrust", .) %>%
  gsub("socialwithdrawal", "Social Withdrawal", .) %>%
  gsub("unusualexperiences", "Unusual Experiences", .) %>%
  gsub("agreeableness", "Agreeableness", .) %>%
  gsub("anhedonia", "Anhedonia", .) %>%
  gsub("cognitiveproblems", "Cognitive Problems", .) %>%
  gsub("emotionaldetachment", "Emotional Detachment", .) %>%
  gsub("grandiosity", "Grandiosity", .) %>%
  gsub("irresponsibility", "Irresponsibility", .) %>%
  gsub("nonperseverence", "Non-perseverence", .) %>%
  gsub("peculiarity", "Peculiarity", .) %>%
  gsub("rigidity", "Rigidity", .) %>%
  gsub("rudeness", "Rudeness", .) %>%
  gsub("submissiveness", "Submissiveness", .) %>%
  gsub("workaholism", "Workaholism", .) %>%
  gsub("conscientiousness", "Conscientiousness", .)

#Then print means
cat_cols <- grep("^CAT", names(catpd_with_bigfive_no_open), value = TRUE)
cat_summary_table <- data.frame(
  Variable = character(),
  Mean = numeric(),
  SD = numeric(),
  stringsAsFactors = FALSE
)

hist(catpd_with_bigfive_no_open$`CAT-PD Submissiveness`)

for (col in cat_cols) {
  mean_val <- mean(catpd_with_bigfive_no_open[[col]], na.rm = TRUE)
  sd_val <- sd(catpd_with_bigfive_no_open[[col]], na.rm = TRUE)

  cat_summary_table <- rbind(cat_summary_table, data.frame(
    Variable = col,
    Mean = round(mean_val, 2),
    SD = round(sd_val, 2)
  ))
}


#### end ####

#### Cronbach's alpha calcs ####
reliability_df <- scoring %>%
  dplyr::select(tidyselect::matches("cat_pd|bfi2"))

bfi_variables_reversals <- c(
  "bfi2_11", "bfi2_16", "bfi2_26", "bfi2_31", "bfi2_36", "bfi2_51",
  "bfi2_12", "bfi2_17", "bfi2_22", "bfi2_37", "bfi2_42", "bfi2_47",
  "bfi2_3", "bfi2_8", "bfi2_23", "bfi2_24", "bfi2_28", "bfi2_29",
  "bfi2_44", "bfi2_48", "bfi2_49", "bfi2_58", "bfi2_4", "bfi2_5",
  "bfi2_9", "bfi2_25", "bfi2_30", "bfi2_45", "bfi2_50", "bfi2_55"
)

for (variable in bfi_variables_reversals) {
  recoded_variable <- paste0(variable, "r")
  reliability_df[[recoded_variable]] <- dplyr::recode(reliability_df[[variable]],
                                                      `1` = 5, `2` = 4, `3` = 3, `4` = 2, `5` = 1)
  attr(reliability_df[[recoded_variable]], "label") <- "Reversed"
}

cat_reversed_variables <- c(
  "cat_pd_134", "cat_pd_167", "cat_pd_147", "cat_pd_180", "cat_pd_149",
  "cat_pd_181", "cat_pd_201", "cat_pd_5", "cat_pd_210", "cat_pd_165",
  "cat_pd_196", "cat_pd_85", "cat_pd_184", "cat_pd_169", "cat_pd_205",
  "cat_pd_64", "cat_pd_97", "cat_pd_131", "cat_pd_185", "cat_pd_135",
  "cat_pd_168", "cat_pd_162", "cat_pd_133", "cat_pd_166", "cat_pd_89",
  "cat_pd_123", "cat_pd_148", "cat_pd_192", "cat_pd_208", "cat_pd_160",
  "cat_pd_130", "cat_pd_194", "cat_pd_24", "cat_pd_57", "cat_pd_200"
)

for (variable in cat_reversed_variables) {
  recoded_variable <- paste0(variable, "r")
  reliability_df[[recoded_variable]] <- dplyr::recode(reliability_df[[variable]],
                                                      `1` = 5, `2` = 4, `3` = 3, `4` = 2, `5` = 1)
  attr(reliability_df[[recoded_variable]], "label") <- "Reversed"
}


catpd_alpha_variables <- list(
  Lability = c("cat_pd_1", "cat_pd_34", "cat_pd_67", "cat_pd_100", "cat_pd_134r", "cat_pd_167r"),
  Anger = c("cat_pd_14", "cat_pd_47", "cat_pd_80", "cat_pd_114", "cat_pd_147r", "cat_pd_180r"),
  Anhedonia = c("cat_pd_16", "cat_pd_49", "cat_pd_82", "cat_pd_116", "cat_pd_149r", "cat_pd_181r"),
  Anxiousness = c("cat_pd_10", "cat_pd_43", "cat_pd_76", "cat_pd_110", "cat_pd_143", "cat_pd_176", "cat_pd_201r"),
  Callousness = c("cat_pd_5r", "cat_pd_38", "cat_pd_71", "cat_pd_105", "cat_pd_138", "cat_pd_172", "cat_pd_198"),
  Cognitive_Problems = c("cat_pd_9", "cat_pd_42", "cat_pd_75", "cat_pd_109", "cat_pd_142", "cat_pd_175", "cat_pd_200r", "cat_pd_210r"),
  Depressiveness = c("cat_pd_32", "cat_pd_65", "cat_pd_98", "cat_pd_132", "cat_pd_165r", "cat_pd_196r"),
  Domineering = c("cat_pd_12", "cat_pd_45", "cat_pd_78", "cat_pd_112", "cat_pd_145", "cat_pd_178"),
  Emotional_Detachment = c("cat_pd_19", "cat_pd_52", "cat_pd_85r", "cat_pd_119", "cat_pd_152", "cat_pd_184r", "cat_pd_203"),
  Exhibitionism = c("cat_pd_3", "cat_pd_36", "cat_pd_69", "cat_pd_102", "cat_pd_136", "cat_pd_169r"),
  Fantasy_Proneness = c("cat_pd_6", "cat_pd_39", "cat_pd_72", "cat_pd_106", "cat_pd_139", "cat_pd_173"),
  Grandiosity = c("cat_pd_8", "cat_pd_41", "cat_pd_74", "cat_pd_108", "cat_pd_141", "cat_pd_174", "cat_pd_199"),
  Health_Anxiety = c("cat_pd_22", "cat_pd_55", "cat_pd_88", "cat_pd_122", "cat_pd_155", "cat_pd_187", "cat_pd_205r"),
  Hostile_Aggression = c("cat_pd_17", "cat_pd_50", "cat_pd_83", "cat_pd_117", "cat_pd_150", "cat_pd_182", "cat_pd_202", "cat_pd_211"),
  Irresponsibility = c("cat_pd_31", "cat_pd_64r", "cat_pd_97r", "cat_pd_131r", "cat_pd_164", "cat_pd_195", "cat_pd_209"),
  Manipulativeness = c("cat_pd_20", "cat_pd_53", "cat_pd_86", "cat_pd_120", "cat_pd_153", "cat_pd_185r"),
  Misstrust = c("cat_pd_2", "cat_pd_35", "cat_pd_68", "cat_pd_101", "cat_pd_135r", "cat_pd_168r"),
  Nonperseverence = c("cat_pd_29", "cat_pd_62", "cat_pd_95", "cat_pd_129", "cat_pd_162r", "cat_pd_193"),
  Nonplanfulness = c("cat_pd_33", "cat_pd_66", "cat_pd_99", "cat_pd_133r", "cat_pd_166r", "cat_pd_197"),
  NormViolation = c("cat_pd_23", "cat_pd_56", "cat_pd_89r", "cat_pd_123r", "cat_pd_156", "cat_pd_188", "cat_pd_206"),
  Peculiarity = c("cat_pd_15", "cat_pd_48", "cat_pd_81", "cat_pd_115", "cat_pd_148r"),
  Perfectionism = c("cat_pd_13", "cat_pd_46", "cat_pd_79", "cat_pd_113", "cat_pd_146", "cat_pd_179"),
  Relationship_Insecurity = c("cat_pd_28", "cat_pd_61", "cat_pd_94", "cat_pd_128", "cat_pd_161", "cat_pd_192r", "cat_pd_208r"),
  Rigidity = c("cat_pd_26", "cat_pd_59", "cat_pd_92", "cat_pd_104", "cat_pd_126", "cat_pd_159", "cat_pd_171", "cat_pd_191", "cat_pd_207", "cat_pd_212"),
  Risk_Taking = c("cat_pd_27", "cat_pd_60", "cat_pd_93", "cat_pd_127", "cat_pd_160r"),
  Romantic_Disinterest = c("cat_pd_30", "cat_pd_63", "cat_pd_96", "cat_pd_130r", "cat_pd_163", "cat_pd_194r"),
  Rudeness = c("cat_pd_25", "cat_pd_58", "cat_pd_91", "cat_pd_125", "cat_pd_158", "cat_pd_190", "cat_pd_214"),
  SelfHarm = c("cat_pd_7", "cat_pd_40", "cat_pd_73", "cat_pd_107", "cat_pd_140", "cat_pd_213", "cat_pd_216"),
  Social_Withdrawal = c("cat_pd_24r", "cat_pd_57r", "cat_pd_90", "cat_pd_124", "cat_pd_157", "cat_pd_189"),
  Submissiveness = c("cat_pd_4", "cat_pd_37", "cat_pd_70", "cat_pd_103", "cat_pd_137", "cat_pd_170"),
  Unusual_Beliefs = c("cat_pd_21", "cat_pd_54", "cat_pd_87", "cat_pd_121", "cat_pd_154", "cat_pd_186", "cat_pd_204"),
  Unusual_Experiences = c("cat_pd_11", "cat_pd_44", "cat_pd_77", "cat_pd_111", "cat_pd_144", "cat_pd_177", "cat_pd_215"),
  Workaholism = c("cat_pd_18", "cat_pd_51", "cat_pd_84", "cat_pd_118", "cat_pd_151", "cat_pd_183")
)

for (variable in names(catpd_alpha_variables)) {
  items <- catpd_alpha_variables[[variable]]
  alpha <- psych::alpha(reliability_df[, items])$total$raw_alpha
  cat(paste0("Cronbach's alpha for ", variable, ": ", round(alpha, 2), "\n"))
}


bfi2_alpha_variables <- list(
  # Domain Scales
  Extraversion = c("bfi2_1", "bfi2_6", "bfi2_11r", "bfi2_16r", "bfi2_21", "bfi2_26r", "bfi2_31r", "bfi2_36r", "bfi2_41", "bfi2_46", "bfi2_51r", "bfi2_56"),
  Agreeableness = c("bfi2_2", "bfi2_7", "bfi2_12r", "bfi2_17r", "bfi2_22r", "bfi2_27", "bfi2_32", "bfi2_37r", "bfi2_42r", "bfi2_47r", "bfi2_52", "bfi2_57"),
  Conscientiousness = c("bfi2_3r", "bfi2_8r", "bfi2_13", "bfi2_18", "bfi2_23r", "bfi2_28r", "bfi2_33", "bfi2_38", "bfi2_43", "bfi2_48r", "bfi2_53", "bfi2_58r"),
  Negative_Emotionality = c("bfi2_4r", "bfi2_9r", "bfi2_14", "bfi2_19", "bfi2_24r", "bfi2_29r", "bfi2_34", "bfi2_39", "bfi2_44r", "bfi2_49r", "bfi2_54", "bfi2_59"),
  Open_Mindedness = c("bfi2_5r", "bfi2_10", "bfi2_15", "bfi2_20", "bfi2_25r", "bfi2_30r", "bfi2_35", "bfi2_40", "bfi2_45r", "bfi2_50r", "bfi2_55r", "bfi2_60"),

  # Facet Scales
  Sociability = c("bfi2_1", "bfi2_16r", "bfi2_31r", "bfi2_46"),
  Assertiveness = c("bfi2_6", "bfi2_21", "bfi2_36r", "bfi2_51r"),
  Energy_Level = c("bfi2_11r", "bfi2_26r", "bfi2_41", "bfi2_56"),
  Compassion = c("bfi2_2", "bfi2_17r", "bfi2_32", "bfi2_47r"),
  Respectfulness = c("bfi2_7", "bfi2_22r", "bfi2_37r", "bfi2_52"),
  Trust = c("bfi2_12r", "bfi2_27", "bfi2_42r", "bfi2_57"),
  Organization = c("bfi2_3r", "bfi2_18", "bfi2_33", "bfi2_48r"),
  Productiveness = c("bfi2_8r", "bfi2_23r", "bfi2_38", "bfi2_53"),
  Responsibility = c("bfi2_13", "bfi2_28r", "bfi2_43", "bfi2_58r"),
  Anxiety = c("bfi2_4r", "bfi2_19", "bfi2_34", "bfi2_49r"),
  Depression = c("bfi2_9r", "bfi2_24r", "bfi2_39", "bfi2_54"),
  Emotional_Volatility = c("bfi2_14", "bfi2_29r", "bfi2_44r", "bfi2_59"),
  Intellectual_Curiosity = c("bfi2_10", "bfi2_25r", "bfi2_40", "bfi2_55r"),
  Aesthetic_Sensitivity = c("bfi2_5r", "bfi2_20", "bfi2_35", "bfi2_50r"),
  Creative_Imagination = c("bfi2_15", "bfi2_30r", "bfi2_45r", "bfi2_60")
)

for (variable in names(bfi2_alpha_variables)) {
  items <- bfi2_alpha_variables[[variable]]
  alpha <- psych::alpha(reliability_df[, items])$total$raw_alpha
  cat(paste0("Cronbach's alpha for ", variable, ": ", round(alpha, 2), "\n"))
}

#### end ####

#Below takes a while to run
#### Exploratory PCA - bootstrapped Kaiser, exploration of bassack with 1-6 levels ####
### EFA Statistics Across Bootstraps ###

predict_ncomps_analysis <- function(data, indices) {
  # Subset the data using the indices
  subset_data <- data[indices, ]

  # Calculate the correlation matrix using the Spearman method
  cormat <- cor(subset_data, method = "spearman", use='complete.obs') #pairwise is better, but causes errors later with specification of the number of cases - and it made more sense to use spearman cor matrix here - cannot specify when calling fa.parallel

  # Get the number of observations
  n.obs <- nrow((subset_data))

  # Run parallel analysis
  scree_results <- fa.parallel(cormat, fm = 'ols', fa = 'pc', sqrt = TRUE, n.obs = n.obs, plot=FALSE) #OLS is best

  # Run MAP tests
  maptest <- MAP(cormat, corkind='spearman', Ncases=n.obs)

  # Run Empirical Kaiser
  emp_kai <- EMPKC(cormat, Ncases=n.obs)

  # Return a named numeric vector
  return(c(
    parallel_analysis_results = scree_results$ncomp,
    maptest_traditional = maptest$NfactorsMAP,
    maptest_revised = maptest$NfactorsMAP4,
    emp_kai_facs = emp_kai$NfactorsEMPKC
  ))
}

dataframes_list <- list(
  catpd_with_bigfive,
  catpd_with_bigfive_no_open,
  catpd_with_facets,
  catpd_with_facets_no_open,
  cat_pd_subscales_no_bfi
)

# Names of the dataframes
dataframes_names <- c(
  "CATPD Subscales with all Big Five (2) Domains",
  "CATPD Subscales with Big Five (2) Domains (minus Openness)",
  "CATPD Subscales with all Big Five (2) Facets",
  "CATPD Subscales with Big Five (2) Facets (minus Openness related)",
  "CATPD Subscales without any Big Five (2) Data"
)

library(FactoMineR)
library(ridgeline)
library(ggrain)

boot_results <- list()

# Loop through each combination
for (bfi_catpd_combination in seq_along(dataframes_list)) {
  bfi_catpd_combination_name <- dataframes_names[bfi_catpd_combination]
  bfi_catpd_combination_df <- dataframes_list[[bfi_catpd_combination]]

  # Perform bootstrapping
  bfi_catpd_combination_comps <- boot(sim = 'ordinary', parallel = 'multicore', data = bfi_catpd_combination_df, statistic = predict_ncomps_analysis, R = 5000)

  # Extract the bootstrapped results
  boot_results_temp <- bfi_catpd_combination_comps$t
  colnames(boot_results_temp) <- c(
    "Parallel Analysis",
    "MAP Test Traditional",
    "MAP Test Revised",
    "Empirical Kaiser"
  )

  # Convert to long format
  boot_results_long <- pivot_longer(
    as.data.frame(boot_results_temp),
    cols = everything(),
    names_to = "Level",
    values_to = "Number of Components"
  )

  # Add the combination name as a new column
  boot_results_long$Data <- bfi_catpd_combination_name

  # Store the long format results in the list
  boot_results[[bfi_catpd_combination_name]] <- boot_results_long
}

library('patchwork')

setwd("C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/BassAck")
#boot_results_combined <- bind_rows(boot_results)
#saveRDS(boot_results_combined, 'boot_results_combined_backup.RDS')
boot_results_combined <- readRDS('boot_results_combined_backup.RDS')

replacements <- c(
  'Big Five \\(2\\)' = 'BFI-II',
  'CATPD' = 'CAT-PD',
  ' Domains' = ' (D)',
  ' Facets' = ' (F)',
  ' Subscales with all ' = '+',
  ' Subscales with ' = '+',
  '(minus Openness related)' = '-O',
  '(minus Openness)' = '-O',
  ' Subscales without any BFI-II Data' = ''
)

boot_results_combined$Data <- str_replace_all(boot_results_combined$Data, replacements)
unique(boot_results_combined$Data)

library("patchwork")
library(scales)

grouped_boot_results_combined <- boot_results_combined %>%
  group_by(Data) %>%
  summarise(
    SD = round(sd(`Number of Components`), 2),
    M = round(mean(`Number of Components`), 2),
    .groups = 'drop'  # Prevents grouping after summarizing
  )

boot_results_combined <- boot_results_combined %>%
  left_join(grouped_boot_results_combined, by = "Data")

boot_results_combined$Data <- paste0('\n', boot_results_combined$Data, '\n',
                                    'Grand M = ', boot_results_combined$M, '\n',
                                    'Grand SD = ', boot_results_combined$SD, '\n')


number_components_per_heuristic_per_datatype <- ggplot(boot_results_combined, aes(x = `Number of Components`, y = Level, fill = Data)) +
  geom_density_ridges(
    stat = "binline", bins = 15,
    scale = .8,
    color = "black",
    alpha = .6
  ) +
  scale_x_continuous(
    breaks = 1:10,
    limits = c(1, 10)
  ) +
  scale_fill_viridis_d() +
  labs(
    x = "Number of Components",
    y = "Stopping Heuristic"
  ) +
  theme_minimal() +
  theme(
    panel.spacing = unit(0.1, "lines"),
    plot.title = element_blank(),
    legend.title = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank()
  )
#FOR KFOLD
library(ggplot2)
library(viridis)
library(FactoMineR)
library('missMDA')


#FOR GENERALISED CV
# Function to bootstrap the criterion
bootstrap_pca_criterion <- function(data, indices) {
  boot_sample <- data[indices, ]
  pca_result <- estim_ncp(scale(na.omit(boot_sample), center = TRUE, scale = TRUE), method = 'Smooth', ncp.max = 10)
  return(pca_result$criterion)
}

# Create a list to store the data for plotting
plot_data <- list()

# Loop through each combination
for (bfi_catpd_combination in seq_along(dataframes_list)) {
  bfi_catpd_combination_name <- dataframes_names[bfi_catpd_combination]
  bfi_catpd_combination_df <- dataframes_list[[bfi_catpd_combination]]
  cross_validated_pca <- estim_ncp(scale(na.omit(bfi_catpd_combination_df), center = TRUE, scale = TRUE), method = 'Smooth', ncp.max = 10)

  # Perform bootstrapping
  boot_results <- boot(data = bfi_catpd_combination_df, statistic = bootstrap_pca_criterion, R = 5000)

  # Calculate the 95% confidence intervals
  ci_low <- apply(boot_results$t, 2, function(x) quantile(x, 0.025))
  ci_high <- apply(boot_results$t, 2, function(x) quantile(x, 0.975))

  # Store the data in a dataframe
  df <- data.frame(
    Number_of_Components = 1:length(cross_validated_pca$criterion),
    Criterion = cross_validated_pca$criterion,
    CI_Low = ci_low,
    CI_High = ci_high,
    Data = bfi_catpd_combination_name
  )

  plot_data[[bfi_catpd_combination]] <- df
}

# Combine all dataframes into one
#bootstrapped_gcv <- bind_rows(plot_data)
setwd("C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/BassAck")
#saveRDS(bootstrapped_gcv, 'bootstrapped_gcv_backup.RDS')
bootstrapped_gcv <- readRDS('bootstrapped_gcv.RDS')

bootstrapped_gcv_check <- bootstrapped_gcv
bootstrapped_gcv_check$Criterion <- log(bootstrapped_gcv_check$Criterion, 10)
bootstrapped_gcv_check$CI_Low <- log(bootstrapped_gcv_check$CI_Low, 10)
bootstrapped_gcv_check$CI_High <- log(bootstrapped_gcv_check$CI_High, 10)

bootstrapped_gcv_check$Data <- str_replace_all(bootstrapped_gcv_check$Data, replacements)
bootstrapped_gcv_check$`Number of Components` <- bootstrapped_gcv_check$Number_of_Components

GCV_plot <- ggplot(bootstrapped_gcv_check, aes(x = `Number of Components`, y = Criterion)) +
  geom_point(aes(color = 'black', shape = '1'), size = 3) +
  geom_line(aes(color = 'black', group = Data), linetype = "dotted", size = 0.5) +
  geom_ribbon(aes(ymin = CI_Low, ymax = CI_High, fill = Data), alpha = 0.45) +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  scale_x_continuous(
    breaks = 1:10,
    limits = c(1, 10)
  ) +
  labs(
    title = "",
    y = "Log10 ALOO Prediction Error"
  ) +
  theme_minimal() +
  guides(colour = "none",
         shape = 'none') +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.grid = element_blank(),
    panel.grid.major.x = element_line(color = "grey80", size = 0.5),
  )

number_components_per_heuristic_per_datatype <- ggplot(boot_results_combined, aes(x = `Number of Components`, y = Level, fill = Data)) +
  geom_density_ridges(
    stat = "binline", bins = 10,
    scale = .8,
    color = "black",
    alpha = .45
  ) +
  scale_x_continuous(
    breaks = 1:10,
    limits = c(1, 10)
  ) +
  scale_fill_viridis_d() +
  labs(
    x = "Number of Components",
    y = "Stopping Heuristic"
  ) +
  theme_minimal() +
  theme(
    panel.spacing = unit(0.1, "lines"),
    legend.position = "none",
    plot.title = element_blank(),
    legend.title = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    panel.grid = element_blank(),
    panel.grid.major.x = element_line(color = "grey80", size = 0.5)
  )


# Combine Plots
combined_plot <- number_components_per_heuristic_per_datatype / GCV_plot +
  plot_layout(heights = c(1, 1)) +
  plot_annotation(tag_levels = 'A')

print(combined_plot)

ggsave("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/BootstrapGCVCATPD_HEURISTICS_COMBINED_BFI_II.png",
       plot = combined_plot, width = 1151 / 100, height = 900 / 100, dpi = 300)




#### end ####




#### BassAck with 5 Levels, removing redundant levels ####
cormat <- cor(catpd_with_bigfive_no_open, use='pairwise.complete.obs', method='spearman')
par(mar = c(10, 10, 10, 10))
library(psych)
bassAckward_5 <- bassAckward(cormat, nfactors = 5, fm = "pca", rotate = "varimax", scores = "tenBerge",
                             adjust=FALSE, cut=0.4, plot=T, use = "pairwise", cor = "spearman", weight = NULL,
                             correct = 0.5, curves=TRUE, organize=TRUE)
bassAckward_5$bass.ack

print(bassAckward_5, short=F)

diag <- bassAckward.diagram(
  bassAckward_5,
  digits = 2,
  cut = 0.3,
  labels = NULL,
  marg = c(1.5, .5, 1.0, .5),
  main = "Bass-Ackward Solution",
  items = FALSE,
  sort = TRUE,
  lr = F,
  curves = TRUE,
  organize = TRUE,
  values = T
)

#Have a look at the var explained
sum_var_expl <- sapply(bassAckward_5$fa.vac, sum)
print(sum_var_expl)

output_path <- "C:/Users/ctoby/Desktop/PHD Data/Chapter 3/VarExplBassAckPerHierarchyLevel.png"
png(filename = output_path, width = 549, height = 412)
barplot(sum_var_expl * 100,
        col = hcl.colors(5, palette = "viridis", alpha = 0.7),
        xlab = "Hierarchy Level",
        ylab = "Amount of Variance Explained (%)",
        names.arg = 1:length(sum_var_expl))
dev.off()

#NOW, lets look at the structure of the bass-ackwerds
#Due to some internal operations by the package, and rotations, it is difficult to compare components between iterations.
#Ie C4 in layer 5 is not necessarily the same as C4 in layer 4
#Now compute individual scores
individual_bass_ack_scores <- NULL
fa_loadings <- NULL
for (level in 1:5) {
  fa_lev_loadings <- as.data.frame(bassAckward_5$fa[[level]]$loadings)
  complete_cases <- complete.cases(fa_lev_loadings)
  fa_lev_loadings <- fa_lev_loadings[complete_cases, ]
  colnames(fa_lev_loadings) <- paste0("Tier", level, "_", colnames(fa_lev_loadings))
  fa_loadings <- cbind(fa_loadings, fa_lev_loadings)
  # Calculate factor scores
  fa_lev_scores <- factor.scores(x = catpd_with_bigfive_no_open, f = fa_lev_loadings, method = "Thurstone")
  # Combine scores using cbind
  individual_bass_ack_scores <- cbind(individual_bass_ack_scores, fa_lev_scores$scores)
}

bas_ack_loadings <- list()
for (level in 1:5){
  fa_lev <- as.data.frame(bassAckward_5$fa[[level]]$loadings)
  complete_cases <- complete.cases(fa_lev)
  fa_lev <- fa_lev[complete_cases, ]
  colnames(fa_lev) <- paste0("Tier", level, "_", colnames(fa_lev))
  print(fa_lev)
  bas_ack_loadings[[level]] <- fa_lev
}

congruence <- factor.congruence(bas_ack_loadings)
congruence[upper.tri(congruence, diag = T)] <- NaN
congruence <- as.data.frame(congruence)
#We can see that there is some perpetuation between levels and components.
#It would not be unnecessary to test over all components
#Let's extract the bottom run of comps
#fa_lev_loadings from the iteration above is for tier 5

component_loadings_tier_5 <- fa_lev_loadings

component_loadings_tier_5_heatmap <- round(component_loadings_tier_5,2)
component_loadings_tier_5_heatmap <- ifelse(abs(component_loadings_tier_5_heatmap) < .3, NA, component_loadings_tier_5_heatmap)

column_mapping <- c(
  "Tier5_C1" = "NegAffect", #low to high neg affect
  "Tier5_C2" = "Antag", #agreeable to aggro
  "Tier5_C3" = "AntSocSchizot", #antisocial schiz
  "Tier5_C4" = "Detach", #low to high schiz
  "Tier5_C5" = "Disinhib" #conscientious to detach
)


component_loadings_tier_5_heatmap <- as.data.frame(component_loadings_tier_5_heatmap)

component_loadings_tier_5_heatmap <- component_loadings_tier_5_heatmap %>%
  rename_with(~column_mapping[.x], .cols = everything())
component_loadings_tier_5_heatmap <- component_loadings_tier_5_heatmap[order(rownames(component_loadings_tier_5_heatmap)), ]
component_loadings_tier_5_heatmap <- component_loadings_tier_5_heatmap[do.call(order, as.data.frame(component_loadings_tier_5_heatmap)), ]
plot.new()
comp_ldings<- pheatmap(
  t(component_loadings_tier_5_heatmap),
  border_color = "white",
  color = adjustcolor(viridis(100), alpha.f = 0.2),
  main = "",
  breaks = seq(-0.8, 0.8, length.out = 101),
  cellwidth = 20,
  cellheight = 20,
  show_rownames = TRUE,
  show_colnames = TRUE,
  cluster_rows = FALSE,
  cluster_cols = FALSE,
  display_numbers = ifelse(is.na(t(component_loadings_tier_5_heatmap)), "", t(component_loadings_tier_5_heatmap)),
  fontsize_number = 7,
  angle_col = 45
)

ggsave("C:/Users/ctoby/Desktop/PHD Data/Chapter 3/BassAckT5ComponentLoadings.png",
       plot = comp_ldings, width = 1500 / 100, height = 569 / 100, dpi = 300)

library(dplyr)


fa_lev5_scores <- factor.scores(x = catpd_with_bigfive_no_open, f = component_loadings_tier_5, method = "Thurstone")
individual_bass_ack_scores <- as.data.frame(fa_lev5_scores$scores)
individual_bass_ack_scores <- individual_bass_ack_scores %>%
  rename_with(~column_mapping[.x], .cols = everything())

#Get rid of the weak loadings, save to csv
component_loadings_tier_5 <- as.data.frame(round(component_loadings_tier_5, 3))
component_loadings_tier_5 <- component_loadings_tier_5 %>%
  rename_with(~column_mapping[.x], .cols = everything())
component_loadings_tier_5 <- component_loadings_tier_5[order(component_loadings_tier_5$NegAffect, decreasing = TRUE), ]
component_loadings_tier_5 <- replace(component_loadings_tier_5, abs(component_loadings_tier_5) < 0.4, NaN)


setwd("C:/Users/ctoby/Desktop/PHD Data/Chapter 3")
write.csv(component_loadings_tier_5, "component_loadings_tier_5.csv")

#### end ####

#### MDA #####
traumafreq_demographics_bassackward <- cbind(demographics, individual_bass_ack_scores)

#Visualise
traumafreq_demographics_bassackward_cormat <- cor(traumafreq_demographics_bassackward, use = "pairwise.complete.obs", method='spearman')
pheatmap(traumafreq_demographics_bassackward_cormat,
         color = viridis(100),
         main = "Spearman Correlation Heatmap of BassAck Individual Scores with Demographics",
         breaks = seq(-0.6, 0.6, length.out = 101),
         fontsize = 8,
         cellwidth = 15,
         cellheight = 15)

library('MissMech')
library('misty')
library('naniar')
library(finalfit)

traumafreq_demographics_bassackward$Sex[traumafreq_demographics_bassackward$Sex == "Male"] <- 0
traumafreq_demographics_bassackward$Sex[traumafreq_demographics_bassackward$Sex == "Female"] <- 1

traumafreq_demographics_bassackward

data_for_mcar <- traumafreq_demographics_bassackward
data_for_mcar
missing_counts <- colSums(is.na(data_for_mcar))
missing_counts

mcar_test(data_for_mcar)

#Data is not MCAR

mar_test_Family_SES <- glm(is.na(FamilySES) ~ AllTrauma.FirstAge + Sex + ParticipantSES +
                             GenT.FirstAge + SexTrauma.FirstAge + PhysViol.FirstAge +
                             GriefT.FirstAge + AllTrauma.FreqTotal + GenT.FreqTotal +
                             SexTrauma.FreqTotal + PhysViol.FreqTotal + GriefT.FreqTotal +
                             Age, family = "binomial", data = data_for_mcar, maxit=100)

summary(mar_test_Family_SES)


#Data is MAR

#Age and ParticipSES predict missingness in FamilySES

#Check for multicollinearity
numeric_data <- traumafreq_demographics_bassackward[sapply(traumafreq_demographics_bassackward, is.numeric)]
cov_matrix <- cov(na.omit(numeric_data), use="pairwise.complete.obs")
cor_matrix <- cov2cor(cov_matrix)
multi_col_check_cor_noDiag <- cor_matrix
diag(multi_col_check_cor_noDiag) <- 0
high_correlation_pairs <- which(multi_col_check_cor_noDiag > abs(0.8), arr.ind = TRUE)
high_correlation_pairs

#### end ####


#### Explore CATPD BassAck Components against trauma variables + demographics using lavaan #####
#https://cran.r-project.org/web/packages/semhelpinghands/vignettes/standardizedSolution_boot_ci.html


library("semfindr")
library("semlbci")
library('manymome')
library(stdmod)
library('influence.SEM')
library('semptools')
library('lavaanExtra')
library('jtools')
library('semTools')
library('SEMsens')
library('ggpubr')
library(ggplot2)
library(gridExtra)
library('rockchalk')
library(semfindr)
library('mvoutlier')
library('isotree')
library(solitude)
library(outliertree)
library('RoughSets')
library('infotheo')
library(stringr)
library(cvsem)
library(rcompanion)
library('ggpattern')
library(emmeans)


# Set working directory
setwd("C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/Schaefer_BassAck_Demograph")

#Build a model up for looping over focal traumas
# Define core model structure function
#if statements are included to add covariates if looking at trauma specific effects
#No threeway for PhysViol model - threeway interaction only tested for SexTrauma

generate_core_model_nothreeway <- function(focal_trauma, control_traumas, values_sex_moderator, first_ages_investigated, first_ages_investigated_transformed) {
  model <- paste0("#Core model\n",
                  "group: 1\n",
                  "Antag ~ Antag_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Detach  ~ Detach_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "AntSocSchizot ~ AntSocSchizot_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Disinhib  ~ Disinhib_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "NegAffect  ~ NegAffect_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "# Free some params\n",
                  "Antag ~~ 0*Detach + 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "Detach ~~ 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "AntSocSchizot~~ 0*Disinhib + 0*NegAffect\n",
                  "Disinhib ~~ 0*NegAffect\n",
                  "# Get intercepts\n",
                  "Antag ~ NOTExposedAntag*1\n",
                  "Detach ~NOTExposedDetach*1\n",
                  "AntSocSchizot~NOTExposedAntSocSchizot*1\n",
                  "Disinhib ~NOTExposedDisinhib*1 \n",
                  "NegAffect ~NOTExposedNegAffect*1 \n",
                  #TRAUMA EXPOSED
                  "group: 2\n",
                  "Antag ~ antag_focaltrauma_beta*", focal_trauma, ".FreqTotal + Antag_Sex_Beta_Exposed*Sex + antag_firstage_beta*", focal_trauma, ".FirstAge  + antag_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + antag_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Detach ~ detach_focaltrauma_beta*", focal_trauma, ".FreqTotal + Detach_Sex_Beta_Exposed*Sex + detach_firstage_beta*", focal_trauma, ".FirstAge  + detach_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + detach_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "AntSocSchizot~ nonconform_focaltrauma_beta*", focal_trauma, ".FreqTotal + AntSocSchizot_Sex_Beta_Exposed*Sex + nonconform_firstage_beta*", focal_trauma, ".FirstAge  + nonconform_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + nonconform_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Disinhib ~ reckless_focaltrauma_beta*", focal_trauma, ".FreqTotal + Disinhib_Sex_Beta_Exposed*Sex + reckless_firstage_beta*", focal_trauma, ".FirstAge  + reckless_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + reckless_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "NegAffect ~ negaffect_focaltrauma_beta*", focal_trauma, ".FreqTotal + NegAffect_Sex_Beta_Exposed*Sex + negaffect_firstage_beta*", focal_trauma, ".FirstAge  + negaffect_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + negaffect_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge   + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "# Free some params\n",
                  "Antag ~~ 0*Detach + 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "Detach ~~ 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "AntSocSchizot~~ 0*Disinhib + 0*NegAffect\n",
                  "Disinhib ~~ 0*NegAffect\n",
                  "Antag ~ Antag_int*1\n",
                  "Detach ~ Detach_int*1\n",
                  "AntSocSchizot~ AntSocSchizot_int*1\n",
                  "Disinhib ~ Disinhib_int*1\n",
                  "NegAffect ~ NegAffect_int*1\n",
                  "\n",
                  "diff_AntagSexSlope_TraumaNoTrauma:= Antag_Sex_Beta_Exposed-Antag_Sex_Beta_NeverExposed\n",
                  "diff_DetachSexSlope_TraumaNoTrauma:= Detach_Sex_Beta_Exposed-Detach_Sex_Beta_NeverExposed\n",
                  "diff_AntSocSchizotSexSlope_TraumaNoTrauma:= AntSocSchizot_Sex_Beta_Exposed-AntSocSchizot_Sex_Beta_NeverExposed\n",
                  "diff_DisinhibSexSlope_TraumaNoTrauma:= Disinhib_Sex_Beta_Exposed-Disinhib_Sex_Beta_NeverExposed\n",
                  "diff_NegAffectSexSlope_TraumaNoTrauma:=NegAffect_Sex_Beta_Exposed-NegAffect_Sex_Beta_NeverExposed\n",
                  "diff_Antag:= Antag_int - NOTExposedAntag\n",
                  "diff_Detach:= Detach_int - NOTExposedDetach \n",
                  "diff_AntSocSchizot:= AntSocSchizot_int - NOTExposedAntSocSchizot\n",
                  "diff_Disinhib:= Disinhib_int - NOTExposedDisinhib \n",
                  "diff_NegAffect:= NegAffect_int - NOTExposedNegAffect\n")
  return(model)
}



generate_core_model <- function(focal_trauma, control_traumas, values_sex_moderator, first_ages_investigated, first_ages_investigated_transformed) {
  model <- paste0("#Core model\n",
                  "group: 1\n",
                  "Antag ~ Antag_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Detach  ~ Detach_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "AntSocSchizot ~ AntSocSchizot_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Disinhib  ~ Disinhib_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "NegAffect  ~ NegAffect_Sex_Beta_NeverExposed*Sex + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "# Free some params\n",
                  "Antag ~~ 0*Detach + 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "Detach ~~ 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "AntSocSchizot~~ 0*Disinhib + 0*NegAffect\n",
                  "Disinhib ~~ 0*NegAffect\n",
                  "# Get intercepts\n",
                  "Antag ~ NOTExposedAntag*1\n",
                  "Detach ~NOTExposedDetach*1\n",
                  "AntSocSchizot~NOTExposedAntSocSchizot*1\n",
                  "Disinhib ~NOTExposedDisinhib*1 \n",
                  "NegAffect ~NOTExposedNegAffect*1 \n",
                  #TRAUMA EXPOSED
                  "group: 2\n",
                  "Antag ~ antag_focaltrauma_beta*", focal_trauma, ".FreqTotal + Antag_Sex_Beta_Exposed*Sex + antag_firstage_beta*", focal_trauma, ".FirstAge  + antag_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + antag_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + ", focal_trauma,".ThreewayInteraction + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Detach ~ detach_focaltrauma_beta*", focal_trauma, ".FreqTotal + Detach_Sex_Beta_Exposed*Sex + detach_firstage_beta*", focal_trauma, ".FirstAge  + detach_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + detach_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + ", focal_trauma,".ThreewayInteraction + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "AntSocSchizot~ nonconform_focaltrauma_beta*", focal_trauma, ".FreqTotal + AntSocSchizot_Sex_Beta_Exposed*Sex + nonconform_firstage_beta*", focal_trauma, ".FirstAge  + nonconform_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + nonconform_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + ", focal_trauma,".ThreewayInteraction + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "Disinhib ~ reckless_focaltrauma_beta*", focal_trauma, ".FreqTotal + Disinhib_Sex_Beta_Exposed*Sex + reckless_firstage_beta*", focal_trauma, ".FirstAge  + reckless_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + reckless_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge  + ", focal_trauma,".ThreewayInteraction + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "\n",
                  "NegAffect ~ negaffect_focaltrauma_beta*", focal_trauma, ".FreqTotal + NegAffect_Sex_Beta_Exposed*Sex + negaffect_firstage_beta*", focal_trauma, ".FirstAge  + negaffect_focaltraumaxsex_interac*", focal_trauma, ".FreqTotal:Sex + negaffect_focaltraumaxfirstage_interac*",  focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge   + ", focal_trauma,".ThreewayInteraction + Sex:", focal_trauma, ".FirstAge + FamilySES + Age",
                  if (focal_trauma != 'AllTrauma') {
                    control_traumas_string <- paste0(control_traumas, ".FreqTotal", collapse = " + ")
                    if (control_traumas_string != "") {
                      control_traumas_string <- paste0("+", control_traumas_string)
                    }
                    control_traumas_string
                  },
                  "# Free some params\n",
                  "Antag ~~ 0*Detach + 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "Detach ~~ 0*AntSocSchizot+ 0*Disinhib + 0*NegAffect\n",
                  "AntSocSchizot~~ 0*Disinhib + 0*NegAffect\n",
                  "Disinhib ~~ 0*NegAffect\n",
                  "Antag ~ Antag_int*1\n",
                  "Detach ~ Detach_int*1\n",
                  "AntSocSchizot~ AntSocSchizot_int*1\n",
                  "Disinhib ~ Disinhib_int*1\n",
                  "NegAffect ~ NegAffect_int*1\n",
                  "\n",
                  "diff_AntagSexSlope_TraumaNoTrauma:= Antag_Sex_Beta_Exposed-Antag_Sex_Beta_NeverExposed\n",
                  "diff_DetachSexSlope_TraumaNoTrauma:= Detach_Sex_Beta_Exposed-Detach_Sex_Beta_NeverExposed\n",
                  "diff_AntSocSchizotSexSlope_TraumaNoTrauma:= AntSocSchizot_Sex_Beta_Exposed-AntSocSchizot_Sex_Beta_NeverExposed\n",
                  "diff_DisinhibSexSlope_TraumaNoTrauma:= Disinhib_Sex_Beta_Exposed-Disinhib_Sex_Beta_NeverExposed\n",
                  "diff_NegAffectSexSlope_TraumaNoTrauma:=NegAffect_Sex_Beta_Exposed-NegAffect_Sex_Beta_NeverExposed\n",
                  "diff_Antag:= Antag_int - NOTExposedAntag\n",
                  "diff_Detach:= Detach_int - NOTExposedDetach \n",
                  "diff_AntSocSchizot:= AntSocSchizot_int - NOTExposedAntSocSchizot\n",
                  "diff_Disinhib:= Disinhib_int - NOTExposedDisinhib \n",
                  "diff_NegAffect:= NegAffect_int - NOTExposedNegAffect\n")
  return(model)
}





setwd('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/BassAck')

trauma_variables <- c('AllTrauma', 'SexTrauma', 'GenT', 'PhysViol', 'GriefT')

for (traumatype in trauma_variables) {
  #Trauma status variable
  freq_total_col <- paste0(traumatype, ".FreqTotal")
  status_col <- paste0(traumatype, "_Status")
  more_than_once_col <- paste0(traumatype, "_More_Than_Once")

  traumafreq_demographics_bassackward[[status_col]] <- ifelse(
    traumafreq_demographics_bassackward[[freq_total_col]] == 0,
    'NotExposed',
    ifelse(
      !is.na(traumafreq_demographics_bassackward[[freq_total_col]]) &
        traumafreq_demographics_bassackward[[freq_total_col]] != 0,
      'Exposed',
      NA
    )
  )

  #More than once is for spline
  traumafreq_demographics_bassackward[[more_than_once_col]] <- ifelse(
    traumafreq_demographics_bassackward[[freq_total_col]] == 0,
    NA,
    ifelse(
      traumafreq_demographics_bassackward[[freq_total_col]] == 1,
      0,
      ifelse(is.na(traumafreq_demographics_bassackward[[freq_total_col]]),
             NA,
             1
      )
    )
  )

}

library(performance)
library('insight')
library(lavaanExtra)
library(ggplotify)
library(gridExtra)
library(semTools)
library(lavaanPlot)
library(Amelia)
library(lavaan.mi)


model_params <- list()
individual_params <- list()
figures <- list()
full_output <- list()

sex_slopes_per_level <- list()
hitop_intercepts_per_level <- list()


# Iterate over trauma_variables for centering
for (focal_trauma in c('SexTrauma','PhysViol')) {
  focal_trauma <- 'PhysViol'
  control_traumas <- setdiff(trauma_variables, focal_trauma)
  control_traumas <- control_traumas[control_traumas != "AllTrauma"]

  #Figure out the shift in first ages wanting to be investigated given centering effects
  first_ages_investigated_original <- c(6, 10, 12, 16, 25)
  mean_first_age <- traumafreq_demographics_bassackward %>%
    filter(!!sym(paste0(focal_trauma, '_Status')) == 'Exposed') %>%
    summarise(mean_first_age = mean(!!sym(paste0(focal_trauma, '.FirstAge')), na.rm = TRUE)) %>%
    pull(mean_first_age)

  first_ages_investigated_transformed  <- first_ages_investigated_original-mean_first_age

  #Center variables at grand mean
  traumafreq_demographics_bassackward_scaled <- traumafreq_demographics_bassackward %>%
    #Centrer age and family ses at grand mean
    mutate(
      Age = scale(Age, center = TRUE, scale = FALSE),
      FamilySES = scale(FamilySES, center = TRUE, scale = FALSE),
      Sex = scale(Sex, center = TRUE, scale = FALSE)
    ) %>%
    mutate(
      across(
        #Scale freq total for focal trauma at 1
        ends_with(paste0(focal_trauma, '.FreqTotal')),
        ~ .x - 1,
        .names = "{col}"
      ),
      across(
        #Scale all others at grand mean
        ends_with('.FreqTotal') & !starts_with(focal_trauma),
        ~ scale(.x, center = TRUE, scale = FALSE),
        .names = "{col}"
      ),
      #Center First Age for focal trauma at mean computed within exposed group
      across(
        ends_with(paste0(focal_trauma, '.FirstAge')),
        ~ .x - mean_first_age,
        .names = "{col}"
      )
    ) %>%
    mutate(
      !!paste0(focal_trauma, '.ThreewayInteraction') := ifelse(
        !!sym(paste0(focal_trauma, '_Status')) == 'Exposed',
        (get(paste0(focal_trauma, '.FirstAge'))) *
          (get(paste0(focal_trauma, '.FreqTotal'))) *
          Sex,
        NA
      )
    ) %>%
    as.data.frame()


  #Generate Descriptives for Exposed and Nonexposed
  Exposed_Nonexposed_Groupings <- list('Exposed', 'NotExposed')
  Exposed_Nonexposed_Groupings_Figures <- list(
    CorrelationMatrix = list(),
    Joyplot = list()
  )

  colnames(traumafreq_demographics_bassackward_scaled)

  for(group in Exposed_Nonexposed_Groupings){
    print(paste("Processing for", focal_trauma, group))

    #Select group data
    group_data <- traumafreq_demographics_bassackward_scaled[
      traumafreq_demographics_bassackward_scaled[[paste0(focal_trauma, "_Status")]] == group, ]

    #Select group variables of interest, based on some conditions
    #Do not select frequency/age of experience for Not Exposed
    #Do not include control variables if the focal trauma is All Trauma

    variables_of_interest <- c('Antag', 'Detach', 'AntSocSchizot', 'Disinhib',
                               'NegAffect', 'Sex', 'FamilySES', 'Age',
                               if (focal_trauma != 'AllTrauma') {
                                 paste0(control_traumas, ".FreqTotal")
                               },
                               if (group == 'Exposed'){
                                 paste0(focal_trauma, ".FreqTotal")
                               },
                               if (group == 'Exposed'){
                                 paste0(focal_trauma, ".FirstAge")
                               },
                               if (group == 'Exposed' & focal_trauma == 'SexTrauma'){
                                 paste0(focal_trauma, ".ThreewayInteraction")
                               })

    if(group == 'Exposed'){
      male_code_exposed_grp <- min(group_data$Sex)
      female_code_exposed_grp <- max(group_data$Sex)
    }

    group_cormat <- cor(group_data[, variables_of_interest],
                        use='complete.obs', method='spearman')

    group_cormat_fig <- as.ggplot(pheatmap(group_cormat,
                                           color = viridis(100),
                                           main = paste("Spearman Variable Correlations in", focal_trauma, group),
                                           breaks = seq(-0.6, 0.6, length.out = 101),
                                           fontsize = 8,
                                           treeheight_row =0,
                                           treeheight_col =0,
                                           cellwidth = 10,
                                           cellheight = 10))

    Exposed_Nonexposed_Groupings_Figures[['CorrelationMatrix']][[group]] <- group_cormat_fig


    group_data_joyplot <- as.data.frame(group_data[, setdiff(variables_of_interest, 'Sex')])
    rownames(group_data_joyplot) <- rownames(group_data)
    group_data_joyplot$MBBP_IDs <- rownames(group_data_joyplot)
    group_data_joyplot$Sex <- group_data$Sex

    group_data_joyplot <- pivot_longer(as.data.frame(na.omit(group_data_joyplot)),
                                       cols = -c(Sex, MBBP_IDs),
                                       names_to = "Level",
                                       values_to = "Value")

    group_joyplot_fig <- ggplot(group_data_joyplot, aes(x = Value, y = Level, fill = as.factor(Level), linetype = as.factor(Sex))) +
      geom_density_ridges(
        scale = 1,
        color = "black",
        alpha = 0.4,
        jittered_points = TRUE, quantile_lines = TRUE,
        point_size = 0.4, point_alpha = 1,
        position = position_raincloud(adjust_vlines = TRUE)
      ) +
      scale_fill_viridis_d(guide = 'none') +
      scale_linetype_manual(values = c("dotted", "solid"), name = "Sex", labels = c("Male", "Female"),
                            guide = guide_legend(override.aes = list(size = 1.5))) +  # Set linetypes for Sex and add legend with adjusted size
      labs(
        title = paste0("Distributions for ", focal_trauma, " ", group, ";\n TotalN=", paste(nrow(group_data), ", Males=", sum(group_data$Sex == min(group_data$Sex)), "\n Dotted Histograms for Males, Solid for Females")),
        x = "",
        y = ""
      ) +
      xlim(-100, 100) +
      theme_minimal() +
      theme(
        panel.spacing = unit(0.1, "lines"),
        strip.text.x = element_text(size = 7),
        axis.text.x = element_text(size = 7),
        axis.text.y = element_text(size = 7),
        axis.title = element_text(size = 7),
        plot.title = element_text(hjust = 0.5, size = 10, face = "bold", lineheight = 1.2)
      )

    Exposed_Nonexposed_Groupings_Figures[['Joyplot']][[group]] <- group_joyplot_fig

    #Check for multicollinearity
    numeric_data <- group_data[variables_of_interest][sapply(group_data[variables_of_interest], is.numeric)]
    cor_matrix <- cor(numeric_data, method='spearman')
    multi_col_check_cor_noDiag <- cor_matrix
    diag(multi_col_check_cor_noDiag) <- 0
    high_correlation_pairs <- which(multi_col_check_cor_noDiag > abs(0.8), arr.ind = TRUE)
    hist(multi_col_check_cor_noDiag)
    print('Multicollinearity check:')
    print(high_correlation_pairs)

  }


  group_joyplots <- grid.arrange(Exposed_Nonexposed_Groupings_Figures$Joyplot$Exposed,
                                 Exposed_Nonexposed_Groupings_Figures$Joyplot$NotExposed,
                                 ncol=2)

  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GroupJoyPlots", focal_trauma, ".png"),
         plot = group_joyplots, width = 1359 / 100, height = 574 / 100, dpi = 300)

  group_corplots <- grid.arrange(Exposed_Nonexposed_Groupings_Figures$CorrelationMatrix$Exposed,
                                 Exposed_Nonexposed_Groupings_Figures$CorrelationMatrix$NotExposed,
                                 nrow=2)

  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GroupCorPlots", focal_trauma, ".png"),
         plot = group_corplots, width = 891 / 100, height = 1000 / 100, dpi = 300)


  figures[[focal_trauma]]$Joyplot_Corplot_Premodel <- Exposed_Nonexposed_Groupings_Figures

  ### FIT THE MODELS ###
  if (focal_trauma == 'SexTrauma'){
    focal_trauma_model <- generate_core_model(focal_trauma, control_traumas, c(male_code_exposed_grp,female_code_exposed_grp), first_ages_investigated_original, first_ages_investigated_transformed)
  } else{
    focal_trauma_model <- generate_core_model_nothreeway(focal_trauma, control_traumas, c(male_code_exposed_grp,female_code_exposed_grp), first_ages_investigated_original, first_ages_investigated_transformed)
  }
  cat(focal_trauma_model)
  ### Amelia imputation ###
  library(lavaan.mi)
  variables_for_amelia <- c('ParticipantSES', 'Antag', 'Detach', 'AntSocSchizot', 'Disinhib',
                            'NegAffect', 'Sex', 'FamilySES', 'Age',
                            paste0(control_traumas, ".FreqTotal"),
                            paste0(focal_trauma, ".FreqTotal"),
                            paste0(focal_trauma, ".FirstAge"),
                            paste0(focal_trauma, "_Status"),
                            if (focal_trauma != 'PhysViol'){
                              paste0(focal_trauma, ".ThreewayInteraction")
                            })
  traumafreq_demographics_bassackward_scaled_amelia <- traumafreq_demographics_bassackward_scaled[, variables_for_amelia]
  amelia_analysis <- amelia(traumafreq_demographics_bassackward_scaled_amelia, idvars = paste0(focal_trauma, "_Status"), parallel = c('snow'),
                            m=25)

  fit_bass_ack_base <- lavaan.mi::sem.mi(model = focal_trauma_model, data = amelia_analysis$imputations, estimator='MLR', group=(paste0(focal_trauma, '_Status')),
                                         group.label=c('NotExposed',"Exposed"),
                                         mimic='mplus',
                                         meanstructure = TRUE,
                                         fixed.x=TRUE)

  fit_bass_ack_base_summar <- lavaan.mi::fitMeasures(fit_bass_ack_base, c('chisq.scaled', 'df.scaled', 'pvalue.scaled', "cfi.scaled","rmsea.scaled",'rmsea.ci.lower.scaled', 'rmsea.ci.upper.scaled', "srmr_mplus"))
  params <- as.data.frame(standardizedSolution.mi(fit_bass_ack_base))

  #Subset ints and sex slopes to save for group difference comparisons
  sex_slopes_per_level[[focal_trauma]] <- subset(params, grepl("Sex_Beta", label))
  hitop_intercepts_per_level[[focal_trauma]] <- subset(params, grepl("~1", op) &
                                                         (grepl('int', label) | grepl('NOT', label)))

  #Aggregate interactions
  firstage_traumafreq_two_way_interaction <- list()
  sex_traumafreq_two_way_interaction <- list()
  sex_firstage_traumafreq_two_way_interaction <- list()
  firstage_sex_three_way_interaction<- list()

  library(semTools)

  for (HiTOP_construct in c('Antag', 'Detach', 'AntSocSchizot', 'Disinhib', 'NegAffect')){

    Interactions_Per_Hitop <- subset(params, params$lhs == HiTOP_construct & params$group == 2)


    #Simple slopes and Ints for Sex Interactions with Freq
    if (sum((Interactions_Per_Hitop$rhs == paste0(focal_trauma, ".FreqTotal:Sex") |
             Interactions_Per_Hitop$rhs == paste0('Sex:', focal_trauma)) &
            Interactions_Per_Hitop$pvalue < 0.05) > 0) {
      # Perform the two-way interaction probe
      sex_traumafreq_two_way_interaction[[HiTOP_construct]] <- probe2WayMC(
        fit_bass_ack_base,
        nameX = c(paste0(focal_trauma, ".FreqTotal"), "Sex", paste0(focal_trauma, ".FreqTotal:Sex")),
        nameY = HiTOP_construct,
        modVar = "Sex",
        valProbe = c(male_code_exposed_grp,female_code_exposed_grp),
        group = 'Exposed'
      )

      sex_traumafreq_two_way_interaction[[HiTOP_construct]]$SimpleIntcept$Value <- 'Simple Intercept'
      sex_traumafreq_two_way_interaction[[HiTOP_construct]]$SimpleSlope$Value <- 'Simple Slope'
      sex_traumafreq_two_way_interaction[[HiTOP_construct]] <- bind_rows(sex_traumafreq_two_way_interaction[[HiTOP_construct]])

      sex_traumafreq_two_way_interaction[[HiTOP_construct]]$Sex <- replace(
        sex_traumafreq_two_way_interaction[[HiTOP_construct]]$Sex,
        sex_traumafreq_two_way_interaction[[HiTOP_construct]]$Sex %in% c(male_code_exposed_grp,female_code_exposed_grp),
        c('Male', 'Female')
      )


      sex_traumafreq_two_way_interaction[[HiTOP_construct]] <- sex_traumafreq_two_way_interaction[[HiTOP_construct]] %>%
        mutate(
          FocalTrauma = focal_trauma,
          Predictor = paste0(Value, ' for ', Sex, ' on ', focal_trauma, ".FreqTotal"),
          Outcome = HiTOP_construct,
          Group='Exposed'
        ) %>%
        dplyr::select(
          Estimate = est,
          StandardError = se,
          OriginalPvalue = pvalue,
          FocalTrauma, Predictor, Outcome, Group
        )

    }

    #Simple slopes and Ints for FirstAge Interactions with Freq
    if (sum(Interactions_Per_Hitop$rhs == (paste0(focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge")) & Interactions_Per_Hitop$pvalue < 0.05) > 0) {
      # Perform the two-way interaction probe
      firstage_traumafreq_two_way_interaction[[HiTOP_construct]] <- probe2WayMC(
        fit_bass_ack_base,
        nameX = c(paste0(focal_trauma, ".FreqTotal"), paste0(focal_trauma, ".FirstAge"), paste0(focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge")),
        nameY = HiTOP_construct,
        modVar = paste0(focal_trauma, ".FirstAge"),
        valProbe = c(first_ages_investigated_transformed),
        group = 'Exposed'
      )

      firstage_traumafreq_two_way_interaction[[HiTOP_construct]]$SimpleIntcept$Value <- 'Simple Intercept'
      firstage_traumafreq_two_way_interaction[[HiTOP_construct]]$SimpleSlope$Value <- 'Simple Slope'
      firstage_traumafreq_two_way_interaction[[HiTOP_construct]] <- bind_rows(firstage_traumafreq_two_way_interaction[[HiTOP_construct]])

      firstage_traumafreq_two_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]] <- replace(
        firstage_traumafreq_two_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]],
        firstage_traumafreq_two_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]] %in% c(first_ages_investigated_transformed),
        c(first_ages_investigated_original)
      )

      firstage_traumafreq_two_way_interaction[[HiTOP_construct]] <- firstage_traumafreq_two_way_interaction[[HiTOP_construct]] %>%
        mutate(
          FocalTrauma = focal_trauma,
          Predictor = paste0(Value, ' for First Age of ', get(paste0(focal_trauma, ".FirstAge")), ' on ', focal_trauma, ".FreqTotal"),
          Outcome = HiTOP_construct,
          Group='Exposed'
        ) %>%
        dplyr::select(
          Estimate = est,
          StandardError = se,
          OriginalPvalue = pvalue,
          FocalTrauma, Predictor, Outcome, Group
        )

    }

    #Simple slopes and Ints for Sex Interactions with First Age
    if (sum(Interactions_Per_Hitop$rhs == (paste0('Sex:', focal_trauma, ".FirstAge")) & Interactions_Per_Hitop$pvalue < 0.05) > 0) {
      # Perform the two-way interaction probe
      sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]] <- probe2WayMC(
        fit_bass_ack_base,
        nameX = c("Sex", paste0(focal_trauma, ".FirstAge"), paste0('Sex:', focal_trauma, ".FirstAge")),
        nameY = HiTOP_construct,
        modVar = paste0(focal_trauma, ".FirstAge"),
        valProbe = c(first_ages_investigated_transformed),
        group = 'Exposed'
      )


      sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]]$SimpleIntcept$Value <- 'Simple Intercept'
      sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]]$SimpleSlope$Value <- 'Simple Slope'
      sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]] <- bind_rows(sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]])



      sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]] <- replace(
        sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]],
        sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]] %in% c(first_ages_investigated_transformed),
        c(first_ages_investigated_original)
      )


      sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]] <- sex_firstage_traumafreq_two_way_interaction[[HiTOP_construct]] %>%
        mutate(
          FocalTrauma = focal_trauma,
          Predictor = paste0(Value, ' for Sex given First Age of ', focal_trauma, ' at age ', get(paste0(focal_trauma, '.FirstAge'))),
          Outcome = HiTOP_construct,
          Group='Exposed'
        ) %>%
        dplyr::select(
          Estimate = est,
          StandardError = se,
          OriginalPvalue = pvalue,
          FocalTrauma, Predictor, Outcome, Group
        )
    }

    #Three way interaction
    if (focal_trauma == 'SexTrauma'){
      if (sum(Interactions_Per_Hitop$rhs == (paste0(focal_trauma, ".ThreewayInteraction")) & Interactions_Per_Hitop$pvalue < 0.05) > 0) {
        firstage_sex_three_way_interaction[[HiTOP_construct]] <- probe3WayMC(fit_bass_ack_base,
                                                                             nameX = c(paste0(focal_trauma, ".FreqTotal"),"Sex" ,paste0(focal_trauma, ".FirstAge"),
                                                                                       paste0(focal_trauma, ".FreqTotal:Sex"),
                                                                                       paste0(focal_trauma, ".FreqTotal:", focal_trauma, ".FirstAge"),
                                                                                       paste0('Sex:', focal_trauma, ".FirstAge"), # the order matters!
                                                                                       paste0(focal_trauma, ".ThreewayInteraction")),           # 3-way interaction
                                                                             nameY = HiTOP_construct, modVar = c("Sex", paste0(focal_trauma, ".FirstAge")),
                                                                             valProbe1 = c(male_code_exposed_grp,female_code_exposed_grp), valProbe2 = c(first_ages_investigated_transformed),
                                                                             group = 'Exposed')

        firstage_sex_three_way_interaction[[HiTOP_construct]]$SimpleIntcept$Value <- 'Simple Intercept'
        firstage_sex_three_way_interaction[[HiTOP_construct]]$SimpleSlope$Value <- 'Simple Slope'
        firstage_sex_three_way_interaction[[HiTOP_construct]] <- bind_rows(firstage_sex_three_way_interaction[[HiTOP_construct]])

        firstage_sex_three_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]] <- replace(
          firstage_sex_three_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]],
          firstage_sex_three_way_interaction[[HiTOP_construct]][[paste0(focal_trauma, ".FirstAge")]] %in% c(first_ages_investigated_transformed),
          c(first_ages_investigated_original)
        )

        firstage_sex_three_way_interaction[[HiTOP_construct]]$Sex <- replace(
          firstage_sex_three_way_interaction[[HiTOP_construct]]$Sex,
          firstage_sex_three_way_interaction[[HiTOP_construct]]$Sex %in% c(male_code_exposed_grp,female_code_exposed_grp),
          c('Male', 'Female')
        )

        firstage_sex_three_way_interaction[[HiTOP_construct]] <- firstage_sex_three_way_interaction[[HiTOP_construct]] %>%
          mutate(
            FocalTrauma = focal_trauma,
            Predictor = paste0(Value, ' for ', Sex, 's with a First Age of ', get(paste0(focal_trauma, ".FirstAge")), ' on ', focal_trauma, ".FreqTotal"),
            Outcome = HiTOP_construct,
            Group='Exposed'
          ) %>%
          dplyr::select(
            Estimate = est,
            StandardError = se,
            OriginalPvalue = pvalue,
            FocalTrauma, Predictor, Outcome, Group
          )

      }
    }

  }

  casewise_dv_predictions <- list()
  casewise_dv_residuals <- list()
  casewise_partials <- list()
  variable_residuals <- list()

  #Following https://groups.google.com/g/lavaan/c/ftvD1Nxb4Iw - not incl in paper, though

  for(group in Exposed_Nonexposed_Groupings){
    print(paste("Processing residuals for", focal_trauma, group))
    outcomes <- c('Antag', 'Detach', 'AntSocSchizot', 'Disinhib', 'NegAffect')
    for (imp in seq(1:25)){
      imputed_data_set <- amelia_analysis$imputations[[paste0('imp', imp)]]
      imputed_analysis <- fit_bass_ack_base@coefList[[imp]]
      if (group == 'Exposed'){
        group = 'Exposed'
        predictors <- c(paste0(focal_trauma, '.FreqTotal'),'Sex',(paste0(focal_trauma, '.FirstAge')),
                        'FamilySES','Age',
                        if (focal_trauma != 'AllTrauma') {
                          paste0(control_traumas, ".FreqTotal")
                        },
                        if (focal_trauma == 'SexTrauma') {
                          paste0(focal_trauma, '.ThreewayInteraction')
                        })
        status_col <- imputed_data_set[[paste0(focal_trauma, "_Status")]]
        X <-as.data.frame(subset(imputed_data_set[predictors], status_col=='Exposed'))
        X[(paste0(focal_trauma, '.FreqTotal:Sex'))] <- X[(paste0(focal_trauma, '.FreqTotal'))]*X$Sex
        X[(paste0(focal_trauma, '.FreqTotal:',focal_trauma,'.FirstAge'))] <- X[(paste0(focal_trauma, '.FreqTotal'))]*X[(paste0(focal_trauma, '.FirstAge'))]
        X[(paste0('Sex:', focal_trauma, '.FirstAge'))] <- X$Sex*X[(paste0(focal_trauma, '.FirstAge'))]

        X <-as.matrix(X)
        predictors <- dimnames(X)[[2]]
        X <- cbind(intercept = 1,  X)
        Y <-as.matrix(subset(imputed_data_set[outcomes], status_col=='Exposed'))
        B <- imputed_analysis$Exposed$beta[outcomes, predictors]
        int <- imputed_analysis$Exposed$alpha[outcomes, "intercept"]
        B <- t(cbind(intercept = int, B))
        Y_pred <- X %*% B
        Y_hat <- Y - Y_pred
        Y_hat <- as.data.frame(Y_hat)
        Y <- as.data.frame(Y)
        Y_pred <- as.data.frame(Y_pred)
        Y_hat$Exposure_Status <- 'Exposed'
        Y_pred$Exposure_Status <- 'Exposed'
        Y_hat$Imp <- imp
        Y_pred$Imp <- imp
        casewise_dv_residuals[[group]][[imp]] <- as.data.frame(Y_hat)
        casewise_dv_predictions[[group]][[imp]] <- as.data.frame(Y_pred)

        #Now, recompute Y Pred against FreqTotal and our interactions after partialling OUT the effect of the other predictors
        focal_predictors <- c(paste0(focal_trauma, '.FreqTotal'),(paste0(focal_trauma, '.FirstAge')),
                              paste0(focal_trauma, '.FreqTotal:',focal_trauma,'.FirstAge'),
                              paste0(focal_trauma, '.FreqTotal:Sex'),
                              paste0('Sex:', focal_trauma, '.FirstAge'),
                              if (focal_trauma == 'SexTrauma') {
                                paste0(focal_trauma, '.ThreewayInteraction')
                              })

        for (focal_var in focal_predictors){
          Y_partial_pred <- X[, -which(colnames(X) == focal_var)] %*% B[!(row.names(B) %in% focal_var),]
          Y_partial_hat <- as.data.frame(Y - Y_partial_pred)
          focal_var_data <- as.data.frame(X[, which(colnames(X) == focal_var)])
          for(Hitop_DV in colnames(Y_partial_pred)){
            merged_data <- data.frame(
              focal_var_data = focal_var_data,
              Hitop_DV_values = Y_partial_hat[[Hitop_DV]]
            )
            names(merged_data) <- c(focal_var, Hitop_DV)

            casewise_partials[[group]][[imp]] <- as.data.frame(merged_data)
          }
        }
      }
      if (group == 'NotExposed'){
        predictors <- c('Sex','FamilySES','Age',
                        if (focal_trauma != 'AllTrauma') {
                          paste0(control_traumas, ".FreqTotal")
                        })
        status_col <- imputed_data_set[[paste0(focal_trauma, "_Status")]]
        X <-as.matrix(subset(imputed_data_set[predictors], status_col=='NotExposed'))
        X <- cbind(intercept = 1,  X)
        Y <-as.matrix(subset(imputed_data_set[outcomes], status_col=='NotExposed'))
        B <- imputed_analysis$NotExposed$beta[outcomes, predictors]
        int <- imputed_analysis$NotExposed$alpha[outcomes, "intercept"]
        B <- t(cbind(intercept = int, B))
        Y_pred <- X %*% B # regression equation
        Y_hat <- Y - Y_pred   # casewise residuals
        Y_hat <- as.data.frame(Y_hat)
        Y <- as.data.frame(Y)
        Y_pred <- as.data.frame(Y_pred)
        Y_hat$Exposure_Status <- 'NotExposed'
        Y_pred$Exposure_Status <- 'NotExposed'
        Y_hat$Imp <- imp
        Y_pred$Imp <- imp

        casewise_dv_residuals[[group]][[imp]] <- as.data.frame(Y_hat)
        casewise_dv_predictions[[group]][[imp]] <- as.data.frame(Y_pred)
      }
    }
  }

  casewise_residuals_data <- bind_rows(casewise_dv_residuals)
  dv_residuals <- pivot_longer(as.data.frame(casewise_residuals_data),
                               cols = -(c('Exposure_Status', 'Imp')),  # Pivot all columns
                               names_to = "Level",  # Name of the new column for Level
                               values_to = "Value")  # Name of the new column for values

  dv_residuals_ExposedOnly <- subset(dv_residuals, !grepl('NotExposed', dv_residuals$Level))

  ggplot_casewise_residuals_Exposed <- ggplot(dv_residuals_ExposedOnly, aes(x = Value, y = Level, fill = factor(Level), linetype = factor(Imp), )) +
    geom_density_ridges(
      stat='binline',
      scale = 1,
      color = "black",
      alpha = 0.01,
      point_size = 0.4, point_alpha = .01,
      position = position_raincloud(adjust_vlines = TRUE),
      bins=30
    ) +
    scale_fill_viridis_d(guide = 'none') +
    labs(
      title = paste0("Distribution of Casewise Residuals for ", focal_trauma, ' Exposed Individuals'),
      x = "",
      y = ""
    ) +
    theme_minimal() +
    theme(
      legend.position = 'none',
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 7),
      axis.text.x = element_blank(),
      axis.text.y = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(hjust = 0.5, size = 10, face = "bold", lineheight = 1.2)
    )

  dv_residuals_NEVERExposedOnly <- subset(dv_residuals, grepl('NotExposed', dv_residuals$Exposure_Status))
  ggplot_casewise_residuals_NEVERExposed <- ggplot(dv_residuals_NEVERExposedOnly, aes(x = Value, y = Level, fill = factor(Level), linetype = factor(Imp), )) +
    geom_density_ridges(
      stat='binline',
      scale = 1,
      color = "black",
      alpha = 0.01,
      point_size = 0.4, point_alpha = .01,
      position = position_raincloud(adjust_vlines = TRUE),
      bins=30
    ) +
    scale_fill_viridis_d(guide = 'none') +
    labs(
      title = paste0("Distribution of Casewise Residuals for Individuals Never Exposed to ", focal_trauma),
      x = "",
      y = ""
    ) +
    theme_minimal() +
    theme(
      legend.position = 'none',
      panel.spacing = unit(0.1, "lines"),
      strip.text.x = element_text(size = 7),
      axis.text.x = element_text(size = 7),
      axis.text.y = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(hjust = 0.5, size = 10, face = "bold", lineheight = 1.2)
    )

  combined_dv_residuals <- ggplot_casewise_residuals_Exposed / ggplot_casewise_residuals_NEVERExposed

  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/CasewiseResiduals", focal_trauma, ".png"),
         plot = combined_dv_residuals, width = 800 / 100, height = 800 / 100, dpi = 300)

  figures[[focal_trauma]]$CasewiseResids <- combined_dv_residuals

  #Prepare nicer reporting
  model_params_for_nicetable <- params
  model_params_for_nicetable$Predictor <- model_params_for_nicetable$rhs
  model_params_for_nicetable$Outcome <- model_params_for_nicetable$lhs

  model_params_for_nicetable$Predictor <- ifelse(
    grepl('diff', model_params_for_nicetable$Outcome)|grepl('~1', model_params_for_nicetable$op),
    model_params_for_nicetable$Outcome,
    model_params_for_nicetable$Predictor
  )


  model_params_for_nicetable$Outcome <- ifelse(
    grepl('diff', model_params_for_nicetable$Outcome)|grepl('~1', model_params_for_nicetable$op),
    '',
    model_params_for_nicetable$Outcome
  )

  model_params_for_nicetable$Predictor <- ifelse(
    grepl('~1', model_params_for_nicetable$op),
    paste('Intercept for', model_params_for_nicetable$Predictor),
    model_params_for_nicetable$Predictor
  )

  model_params_for_nicetable$Predictor <- gsub(
    'diff_',
    paste0('Group Differences (', focal_trauma, ' Exposed vs Not Exposed) for '),
    model_params_for_nicetable$Predictor
  )

  model_params_for_nicetable$Predictor <- ifelse(
    grepl('SexSlope', model_params_for_nicetable$Predictor),
    sub('for (.*)SexSlope', paste0('for Slope of Sex on \\1'), gsub('(diff_).*', paste0('Group Differences (', focal_trauma, ' Exposed vs Not Exposed) for \\1'), model_params_for_nicetable$Predictor)),
    model_params_for_nicetable$Predictor
  )

  model_params_for_nicetable$Predictor <- gsub(
    '_TraumaNoTrauma',
    '',
    model_params_for_nicetable$Predictor
  )


  model_params_for_nicetable$FocalTrauma <- focal_trauma

  model_params_for_nicetable$Predictor <- ifelse(grepl('~~', model_params_for_nicetable$op),
                                                 paste('Residual Correlation:', model_params_for_nicetable$Predictor),
                                                 model_params_for_nicetable$Predictor)

  model_params_for_nicetable$group <- ifelse(
    model_params_for_nicetable$group == '1',
    'Not Exposed',
    ifelse(
      model_params_for_nicetable$group == '2',
      'Exposed',
      NA
    )
  )


  overall_params_nice_table <- model_params_for_nicetable %>%
    mutate(`Fully Standardised` = 'Y') %>%
    dplyr::select(FocalTrauma, Group = `group`, Predictor, Outcome,
                  Estimate = `est.std`,
                  EstimateUCI = `ci.upper`,
                  EstimateLCI = `ci.lower`,
                  StandardError = `se`,
                  OriginalPvalue = `pvalue`,
                  `Fully Standardised`)

  overall_params_nice_table <- as.data.frame(bind_rows(overall_params_nice_table))
  firstage_traumafreq_two_way_interaction <- as.data.frame(bind_rows(firstage_traumafreq_two_way_interaction))
  sex_traumafreq_two_way_interaction <- as.data.frame(bind_rows(sex_traumafreq_two_way_interaction))
  firstage_sex_three_way_interaction <- as.data.frame(bind_rows(firstage_sex_three_way_interaction))
  sex_firstage_traumafreq_two_way_interaction <- as.data.frame(bind_rows(sex_firstage_traumafreq_two_way_interaction))

  overall_params_nice_table$Estimate <- as.numeric(overall_params_nice_table$Estimate)
  overall_params_nice_table$OriginalPvalue <-as.numeric(overall_params_nice_table$OriginalPvalue)

  str(overall_params_nice_table)
  str(firstage_traumafreq_two_way_interaction)
  str(sex_traumafreq_two_way_interaction)
  str(firstage_sex_three_way_interaction)
  str(sex_firstage_traumafreq_two_way_interaction)

  overall_params_nice_table <- bind_rows(overall_params_nice_table,
                                         as.data.frame(firstage_traumafreq_two_way_interaction),
                                         as.data.frame(sex_traumafreq_two_way_interaction),
                                         as.data.frame(firstage_sex_three_way_interaction),
                                         as.data.frame(sex_firstage_traumafreq_two_way_interaction))


  rownames(overall_params_nice_table) <- NULL

  individual_params[[focal_trauma]] <- overall_params_nice_table
  model_params[[focal_trauma]] <- fit_bass_ack_base_summar


  ### Performance across random folds ###
  stratified_kfold <- list()
  kfold_leave_out_characteristics <- list()
  stratified_kfold_overallparams <- list()

  # Do repeated stratified fold - drop 5% of people randomly - do it 5000 times
  #This takes a LONG time to run locally - so I have switched off (already done)
  repeat_kfold = T
  if (repeat_kfold == T){
    print('Doing Kfold')
    for (i in 1:5000) {
      print("Repeated kfold iteration:")
      print(i)
      fold_data <- amelia_analysis$imputations
      Exposed_Indices <- which(fold_data[[1]][(paste0(focal_trauma, "_Status"))] == 'Exposed')
      Not_exposed_indices <- which(fold_data[[1]][(paste0(focal_trauma, "_Status"))] == 'NotExposed')

      # Calculate the number of rows to drop for each group
      num_to_drop_exposed <- round(0.05*length(Exposed_Indices))
      num_to_drop_notexposed <- round(0.05*length(Not_exposed_indices))

      # Randomly sample indices to drop for each group
      drop_indices_exposed <- sample(Exposed_Indices, num_to_drop_exposed)
      drop_indices_notexposed <- sample(Not_exposed_indices, num_to_drop_notexposed)

      out_of_fold_data <- fold_data
      out_of_fold_data_clean <- lapply(out_of_fold_data, function(df) {
        colnames(df) <- str_remove(colnames(df), "^imp\\d+_")
        df[c(drop_indices_exposed, drop_indices_notexposed), ]
      })

      out_of_fold_data <- bind_rows(out_of_fold_data_clean)

      variables_of_interest_exposed <- c('Antag', 'Detach', 'AntSocSchizot', 'Disinhib',
                                         'NegAffect', 'FamilySES', 'Age',
                                         paste0(focal_trauma, ".FreqTotal"), paste0(focal_trauma, ".FirstAge"),
                                         if (focal_trauma != 'AllTrauma') {
                                           paste0(control_traumas, ".FreqTotal")
                                         })

      variables_of_interest_unexposed <- c('Antag', 'Detach', 'AntSocSchizot', 'Disinhib',
                                           'NegAffect', 'FamilySES', 'Age',
                                           if (focal_trauma != 'AllTrauma') {
                                             paste0(control_traumas, ".FreqTotal")
                                           })

      status_column <- paste0(focal_trauma, "_Status", sep = "")
      out_of_fold_data_exposed <- subset(out_of_fold_data, out_of_fold_data[[status_column]] == 'Exposed')
      out_of_fold_data_unexposed <- subset(out_of_fold_data, out_of_fold_data[[status_column]] == 'NotExposed')

      calculate_medians <- function(data, variables) {
        sapply(variables, function(var) median(data[[var]], na.rm = TRUE))
      }
      rownames(out_of_fold_data_unexposed)
      medians_exposed <- as.data.frame(t(calculate_medians(out_of_fold_data_exposed, variables_of_interest_exposed)))
      medians_unexposed <- as.data.frame(t(calculate_medians(out_of_fold_data_unexposed, variables_of_interest_unexposed)))

      medians_exposed$`Proportion Females Exposed Group` <- sum(out_of_fold_data_exposed$Sex == max(out_of_fold_data_exposed$Sex)) / nrow(out_of_fold_data_exposed)
      medians_unexposed$`Proportion Females Not Exposed Group` <- sum(out_of_fold_data_unexposed$Sex == max(out_of_fold_data_unexposed$Sex)) / nrow(out_of_fold_data_unexposed)

      medians_exposed <- as.data.frame(t(medians_exposed))
      medians_unexposed <- as.data.frame(t(medians_unexposed))

      colnames(medians_exposed)[1] <- "Out Of KFold Data"
      colnames(medians_unexposed)[1] <- "Out Of KFold Data"

      rownames(medians_exposed) <- ifelse(!grepl('Prop', rownames(medians_exposed)),
                                          paste('Median', rownames(medians_exposed), 'in', focal_trauma, 'Exposed Group'),
                                          rownames(medians_exposed))
      rownames(medians_unexposed) <- ifelse(!grepl('Prop', rownames(medians_unexposed)),
                                            paste('Median', rownames(medians_unexposed), 'in', focal_trauma, 'Not Exposed Group'),
                                            rownames(medians_unexposed))

      kfold_leave_out_bound <- bind_rows(medians_exposed, medians_unexposed)
      kfold_leave_out_bound$Kfold_Number <- i
      kfold_leave_out_characteristics[[i]] <- kfold_leave_out_bound

      #Drop the sampled rows from each of the imputed dataframes
      for (imp in seq(1:25)){
        fold_data[[imp]] <- fold_data[[imp]][-c(drop_indices_exposed, drop_indices_notexposed), ]
      }

      #Rerun the baseline model
      fold_fit_sem <- lavaan.mi::sem.mi(model = focal_trauma_model, data = fold_data, estimator='MLR', group=(paste0(focal_trauma, '_Status')),
                                        group.label=c('NotExposed',"Exposed"),
                                        mimic='mplus',
                                        meanstructure = TRUE,
                                        fixed.x=TRUE)

      fold_fit_sem_summary <- as.data.frame(bind_rows(fitMeasures(fit_bass_ack_base, c('chisq.scaled', 'df.scaled', 'pvalue.scaled', "cfi.scaled","rmsea.scaled",'rmsea.ci.lower.scaled', 'rmsea.ci.upper.scaled', "srmr_mplus"))))
      fold_fit_sem_summary$Kfold_Number <- i

      fold_data <- as.data.frame(standardizedSolution.mi(fold_fit_sem))
      fold_data$Kfold_Number <- i

      # Store analysis results
      stratified_kfold[[i]] <- as.data.frame(fold_data)
      stratified_kfold_overallparams[[i]] <- as.data.frame(fold_fit_sem_summary)
    }
    setwd('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/')
    saveRDS(stratified_kfold_overallparams, paste0(focal_trauma, '_stratified_kfold_overallparams_7_2.RDS'))
    saveRDS(stratified_kfold, paste0(focal_trauma, '_stratified_kfold_7_2.RDS'))
    saveRDS(kfold_leave_out_characteristics, paste0(focal_trauma, '_kfold_leave_out_characteristics_7_2.RDS'))
  }


  setwd('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/')
  stratified_kfold_overallparams <- readRDS(paste0(focal_trauma, '_stratified_kfold_overallparams_7_2.RDS'))
  stratified_kfold <- readRDS(paste0(focal_trauma, '_stratified_kfold_7_2.RDS'))
  kfold_leave_out_characteristics <- readRDS(paste0(focal_trauma, '_kfold_leave_out_characteristics_7_2.RDS'))

  kf_params <- bind_rows(stratified_kfold)
  model_kf_params_for_nicetable <- kf_params
  model_kf_params_for_nicetable$Predictor <- model_kf_params_for_nicetable$rhs
  model_kf_params_for_nicetable$Outcome <- model_kf_params_for_nicetable$lhs
  control_traumas_pattern <- paste(control_traumas, collapse = "|")

  model_kf_params_for_nicetable <- subset(
    model_kf_params_for_nicetable,
    (!grepl('1', group) &
       !grepl(control_traumas_pattern, rhs) &
       !(grepl('Age', rhs, fixed = TRUE) & !grepl('FirstAge', rhs, fixed = TRUE)) &
       !grepl('SES$', rhs) &
       op == '~') |
      grepl('diff', lhs)
  )


  model_kf_params_for_nicetable$Predictor <- ifelse(
    grepl('diff', model_kf_params_for_nicetable$Outcome) | grepl('SS', model_kf_params_for_nicetable$Outcome) | grepl('SI', model_kf_params_for_nicetable$Outcome),
    model_kf_params_for_nicetable$Outcome,
    model_kf_params_for_nicetable$Predictor
  )



  model_kf_params_for_nicetable$Outcome <- ifelse(
    grepl('diff', model_kf_params_for_nicetable$Outcome),
    '',
    model_kf_params_for_nicetable$Outcome
  )

  model_kf_params_for_nicetable$Predictor <- gsub(
    'diff_',
    paste0('Group Differences (', focal_trauma, ' Exposed vs Not Exposed) for '),
    model_kf_params_for_nicetable$Predictor
  )

  model_kf_params_for_nicetable$Predictor <- ifelse(
    grepl('SexSlope', model_kf_params_for_nicetable$Predictor),
    sub('for (.*)SexSlope', paste0('for Slope of Sex on \\1'), gsub('(diff_).*', paste0('Group Differences (', focal_trauma, ' Exposed vs Not Exposed) for \\1'), model_kf_params_for_nicetable$Predictor)),
    model_kf_params_for_nicetable$Predictor
  )

  model_kf_params_for_nicetable$Predictor <- gsub(
    '_TraumaNoTrauma',
    '',
    model_kf_params_for_nicetable$Predictor
  )

  model_kf_params_for_nicetable$Parameter <- ifelse(model_kf_params_for_nicetable$Outcome != '',
                                                    paste(model_kf_params_for_nicetable$Predictor, 'predicting', model_kf_params_for_nicetable$Outcome),
                                                    model_kf_params_for_nicetable$Predictor
  )

  model_kf_params_for_nicetable <- as.data.frame(model_kf_params_for_nicetable)

  overall_kf_params_nice_table <- model_kf_params_for_nicetable %>%
    dplyr::select(Kfold_Number, Parameter,
                  StandardisedSlopeBeta = `est.std`,
                  StandardisedSlopeSE = `se`,
                  OriginalPvalue = `pvalue`)

  overall_kf_params_nice_table$Parameter <- ifelse(
    !grepl('Differences', overall_kf_params_nice_table$Parameter),
    paste(focal_trauma, 'Exposed Group:', overall_kf_params_nice_table$Parameter),
    overall_kf_params_nice_table$Parameter
  )

  overall_kf_params_nice_table$AbsoluteStandardisedBeta <- abs(overall_kf_params_nice_table$StandardisedSlopeBeta)
  median_abs_values <- aggregate(AbsoluteStandardisedBeta ~ Parameter,
                                 data = overall_kf_params_nice_table,
                                 FUN = median)

  overall_kf_params_nice_table$PsychopathologyDimension <- ifelse(grepl('NegAffect', overall_kf_params_nice_table$Parameter), 'NegAffect',
                                                                  ifelse(grepl('Antag', overall_kf_params_nice_table$Parameter), 'Antag',
                                                                         ifelse(grepl('Detach', overall_kf_params_nice_table$Parameter), 'Detach',
                                                                                ifelse(grepl('AntSocSchizot', overall_kf_params_nice_table$Parameter), 'AntSocSchizot',
                                                                                       ifelse(grepl('Disinhib', overall_kf_params_nice_table$Parameter), 'Disinhib', NA)))))

  overall_kf_params_nice_table <- overall_kf_params_nice_table %>%
    group_by(PsychopathologyDimension) %>%
    arrange(PsychopathologyDimension, desc(AbsoluteStandardisedBeta), .by_group = TRUE) %>%
    ungroup()



  overall_kf_params_nice_table$Parameter <- factor(overall_kf_params_nice_table$Parameter,
                                                   levels = unique(overall_kf_params_nice_table$Parameter))

  overall_kf_params_nice_table$EffectSize <- ifelse(overall_kf_params_nice_table$AbsoluteStandardisedBeta < 0.1, 'Negligible',
                                                    ifelse(overall_kf_params_nice_table$AbsoluteStandardisedBeta >= 0.1 & overall_kf_params_nice_table$AbsoluteStandardisedBeta < 0.3, 'Small',
                                                           ifelse(overall_kf_params_nice_table$AbsoluteStandardisedBeta >= 0.3 & overall_kf_params_nice_table$AbsoluteStandardisedBeta < 0.5, 'Medium',
                                                                  ifelse(overall_kf_params_nice_table$AbsoluteStandardisedBeta >= 0.5, 'Large', NA))))

  overall_kf_params_nice_table$EffectSize <- factor(overall_kf_params_nice_table$EffectSize,
                                                    levels = c("Negligible", "Small", "Medium", "Large"))

  overall_kf_params_nice_table$Significance <- ifelse(overall_kf_params_nice_table$OriginalPvalue < .05, 'Significant', 'Not Significant')

  overall_kf_params_nice_table$Significance <- factor(overall_kf_params_nice_table$Significance,
                                                      levels = c('Not Significant', 'Significant'))

  x_limits <- c(0, 0.6)


  joyplot_kfold_stability_beta <- ggplot(overall_kf_params_nice_table, aes(x = AbsoluteStandardisedBeta, y = Parameter, fill = PsychopathologyDimension)) +
    geom_density_ridges(
      scale = .95,
      color = "black",
      alpha = 0.8,
      point_size = 0.4, point_alpha = 1,
      position = position_raincloud(adjust_vlines = TRUE)
    ) +
    facet_wrap(~ PsychopathologyDimension, scales = "free_y", ncol = 1) +
    scale_fill_viridis_d(guide = 'none') +
    scale_color_viridis_d(guide = 'none') +
    scale_x_continuous(
      breaks = c(0, 0.1, 0.3, 0.5),
      labels = c("Negligible", "Small Threshold (>0.10)", "Medium Threshold (>0.30)", "Large Threshold ( >.50)"),
      limits = x_limits
    ) +
    labs(
      title = 'B',
      x = "",
      y = ''
    ) +
    theme_minimal() +
    theme(
      panel.spacing = unit(1, "lines"),
      strip.text = element_blank(),
      axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
      axis.text.y = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(hjust = 0),
      panel.grid.major.y = element_line(color = "black"),
      panel.grid.major.x = element_line(color = "black", size = 0.5)
    )



  joyplot_kfold_stability_pvalue <- ggplot(overall_kf_params_nice_table, aes(x = OriginalPvalue, y = Parameter, fill = PsychopathologyDimension)) +
    geom_density_ridges(
      scale = .95,
      color = "black",
      alpha = 0.8,
      point_size = 0.4, point_alpha = 1,
      position = position_raincloud(adjust_vlines = TRUE)
    ) +
    facet_wrap(~ PsychopathologyDimension, scales = "free_y", ncol = 1) +
    scale_fill_viridis_d(guide = 'none') +
    scale_color_viridis_d(guide = 'none') +
    scale_x_continuous(
      breaks = c(0, 0.05),
      labels = c("p < .05", "p = .05"),
      limits = c(0, .5)
    ) +
    labs(
      title = 'A',
      x = "",
      y = ''
    ) +
    theme_minimal() +
    theme(
      panel.spacing = unit(1, "lines"),
      strip.text = element_blank(),
      axis.text.x = element_text(size = 7),
      axis.text.y = element_text(size = 7),
      axis.title = element_text(size = 7),
      plot.title = element_text(hjust = 0),
      panel.grid.major.y = element_line(color = "black"),
      panel.grid.major.x = element_line(color = "black", size = 0.5)
    )

  library(patchwork)
  combined_parameter_stability_plots <- joyplot_kfold_stability_pvalue / joyplot_kfold_stability_beta

  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/combined_parameter_stability_plots_", focal_trauma, ".png"),
         plot = combined_parameter_stability_plots, width = 950 / 100, height = 1500 / 100, dpi = 300)

  #Start a table for reporting (makes things slightly easier)
  overall_kf_params_nice_table_grouped <- overall_kf_params_nice_table %>%
    group_by(Parameter) %>%
    summarise(
      PercentageOfSignificantPValues = mean(OriginalPvalue < 0.05) * 100,
      PercentageOfNegligibleEffectSizes = mean(abs(StandardisedSlopeBeta) < 0.1) * 100,
      PercentageOfSmallEffectSizes = mean(abs(StandardisedSlopeBeta) >= 0.1 & abs(StandardisedSlopeBeta) < 0.3) * 100,
      PercentageOfMediumEffectSizes = mean(abs(StandardisedSlopeBeta) >= 0.3 & abs(StandardisedSlopeBeta) < 0.5) * 100,
      PercentageOfLargeEffectSizes = mean(abs(StandardisedSlopeBeta) >= 0.5) * 100
    )


  #Convert out of sample chars to wide
  kfold_leave_out_characteristics_bound <- bind_rows(kfold_leave_out_characteristics)
  kfold_leave_out_characteristics_bound$Variable <- sub("\\.{3}.*$", "", rownames(kfold_leave_out_characteristics_bound))
  rownames(kfold_leave_out_characteristics_bound) <- 1:length(rownames(kfold_leave_out_characteristics_bound))
  kfold_leave_out_characteristics_bound_wide <- kfold_leave_out_characteristics_bound %>%
    pivot_wider(names_from = Variable, values_from = `Out Of KFold Data`) %>%
    as.data.frame(kfold_leave_out_characteristics_bound_wide)
  rownames(kfold_leave_out_characteristics_bound_wide) <- kfold_leave_out_characteristics_bound_wide$Kfold_Number
  kfold_leave_out_characteristics_bound_wide <- kfold_leave_out_characteristics_bound_wide[-1]


  #Convert params to wide - but select absolte value for easier interpretations - that is how effect sizes tend to be interpreted
  kfold_leavein_beta_values_wide <- overall_kf_params_nice_table[c('Kfold_Number', 'Parameter','AbsoluteStandardisedBeta')] %>%
    pivot_wider(names_from = Parameter, values_from = AbsoluteStandardisedBeta) %>%
    as.data.frame(kfold_leavein_beta_values_wide)
  rownames(kfold_leavein_beta_values_wide) <- kfold_leavein_beta_values_wide$Kfold_Number
  kfold_leavein_beta_values_wide <- kfold_leavein_beta_values_wide[-1]


  kfold_leavein_p_values_wide <- overall_kf_params_nice_table[c('Kfold_Number', 'Parameter','OriginalPvalue')] %>%
    pivot_wider(names_from = Parameter, values_from = OriginalPvalue) %>%
    as.data.frame(kfold_leavein_p_values_wide)
  rownames(kfold_leavein_p_values_wide) <- kfold_leavein_p_values_wide$Kfold_Number
  kfold_leavein_p_values_wide <- kfold_leavein_p_values_wide[-1]

  #Make sure equal rows - if not, prune.I append with Kfold number to ensure this
  common_rows <- intersect(rownames(kfold_leavein_p_values_wide), rownames(kfold_leave_out_characteristics_bound_wide))
  kfold_leavein_p_values_wide <- kfold_leavein_p_values_wide[common_rows, ]
  kfold_leavein_p_values_wide <- kfold_leavein_p_values_wide[common_rows, ]
  kfold_leave_out_characteristics_bound_wide <- kfold_leave_out_characteristics_bound_wide[common_rows, ]

  #Is pvalue variability over folds associated with characteristics of the left out sample?
  kfold_leavein_p_values_wide_binarised <- kfold_leavein_p_values_wide %>% mutate(across(everything(), ~ ifelse(. < 0.05, 1, 0)))
  correlation_pvalues <- psych::corr.test(as.matrix(kfold_leavein_p_values_wide_binarised), as.matrix(kfold_leave_out_characteristics_bound_wide), adjust="holm", method='pearson')
  correlation_pvalues_spearmans_pvals <- correlation_pvalues$p.adj
  correlation_pvalues_spearmans_pvals <- subset(correlation_pvalues_spearmans_pvals<.05)
  correlation_pvalues_spearmans <- correlation_pvalues$r

  correlation_pvalues_spearmans_pvals <- correlation_pvalues$p.adj
  correlation_pvalues_spearmans_pvals <- ifelse(correlation_pvalues_spearmans_pvals > .05,
                                                '',
                                                '*')

  for (col in colnames(kfold_leavein_p_values_wide_binarised)) {
    if (all(kfold_leavein_p_values_wide_binarised[[col]] == 1)) {
      correlation_pvalues_spearmans_pvals[col, ] <- "1"
    } else if (all(kfold_leavein_p_values_wide_binarised[[col]] == 0)) {
      correlation_pvalues_spearmans_pvals[col, ] <- "0"
    }
  }

  PsychopathologyDimension <- ifelse(grepl('NegAffect', rownames(correlation_pvalues_spearmans)), 'NegAffect',
                                     ifelse(grepl('Antag', rownames(correlation_pvalues_spearmans)), 'Antag',
                                            ifelse(grepl('Detach', rownames(correlation_pvalues_spearmans)), 'Detach',
                                                   ifelse(grepl('AntSocSchizot', rownames(correlation_pvalues_spearmans)), 'AntSocSchizot',
                                                          ifelse(grepl('Disinhib', rownames(correlation_pvalues_spearmans)), 'Disinhib', NA)))))


  PsychopathologyDimension_df <- data.frame(PsychopathologyDimension = PsychopathologyDimension)
  rownames(PsychopathologyDimension_df) <- rownames(correlation_pvalues_spearmans)

  component_colours <- c(
    'NegAffect' = "#1f77b4",
    'Antag' = "#d62728",
    'Detach' = "#7f7f7f",
    'AntSocSchizot' = "#9467bd",
    'Disinhib' = "#ff7f0e"
  )

  heatmap_pvariability_kfold_pvals <- pheatmap(
    correlation_pvalues_spearmans,
    color = alpha(viridis(100), .4),
    main = "Spearman Correlation Heatmap for KFold Data\nCharacteristics of Left-out Sample vs Observed Parameter Pvalue",
    breaks = seq(-0.3, 0.4, length.out = 101),
    fontsize = 8,
    cellwidth = 10,
    treeheight_row = 0,
    treeheight_col = 0,
    cellheight = 8,
    border_color = "white",
    cluster_rows = F,
    cluster_cols = F,
    annotation_row = PsychopathologyDimension_df,
    annotation_names_row = T,
    annotation_legend = T,
    display_numbers = correlation_pvalues_spearmans_pvals,
    annotation_colors = list(PsychopathologyDimension = component_colours)
  )

  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/KFoldPValsCorplotOutOfSample_", focal_trauma, ".png"),
         plot = heatmap_pvariability_kfold_pvals, width = 1500 / 100, height = 1500 / 100, dpi = 300)



  #Is beta variability over folds associated with characteristics of the left out sample?
  #Make kfold_leavein_beta_values_wide absolute
  kfold_leavein_beta_values_wide <- abs(kfold_leavein_beta_values_wide)
  correlation_beta <- psych::corr.test(as.matrix(kfold_leavein_beta_values_wide), as.matrix(kfold_leave_out_characteristics_bound_wide), adjust="holm", method='spearman')
  correlation_beta_spearmans <- correlation_beta$r
  correlation_beta_spearmans_pvals <- correlation_beta$p.adj
  correlation_beta_spearmans_pvals <- ifelse(correlation_beta_spearmans_pvals > .05,
                                             '',
                                             '*')

  PsychopathologyDimension <- ifelse(grepl('NegAffect', rownames(correlation_beta_spearmans_pvals)), 'NegAffect',
                                     ifelse(grepl('Antag', rownames(correlation_beta_spearmans_pvals)), 'Antag',
                                            ifelse(grepl('Detach', rownames(correlation_beta_spearmans_pvals)), 'Detach',
                                                   ifelse(grepl('AntSocSchizot', rownames(correlation_beta_spearmans_pvals)), 'AntSocSchizot',
                                                          ifelse(grepl('Disinhib', rownames(correlation_beta_spearmans_pvals)), 'Disinhib', NA)))))


  PsychopathologyDimension_df <- data.frame(PsychopathologyDimension = PsychopathologyDimension)
  rownames(PsychopathologyDimension_df) <- rownames(correlation_pvalues_spearmans)

  component_colours <- c(
    'NegAffect' = "#1f77b4",
    'Antag' = "#d62728",
    'Detach' = "#7f7f7f",
    'AntSocSchizot' = "#9467bd",
    'Disinhib' = "#ff7f0e"
  )

  heatmap_betavariability_kfold_pvals <- pheatmap(
    correlation_beta_spearmans,
    color = alpha(viridis(100), .4),
    main = "Spearman Correlation Heatmap for KFold Data\nCharacteristics of Left-out Sample vs Absolute Parameter Beta in In-Sample",
    breaks = seq(-0.3, 0.4, length.out = 101),
    fontsize = 8,
    cellwidth = 10,
    treeheight_row = 0,
    treeheight_col = 0,
    cellheight = 8,
    border_color = "white",
    cluster_rows = F,
    cluster_cols = F,
    annotation_row = PsychopathologyDimension_df,
    annotation_names_row = T,
    annotation_legend = T,
    display_numbers = correlation_beta_spearmans_pvals,
    annotation_colors = list(PsychopathologyDimension = component_colours)
  )


  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/KFoldBetaValsCorplotOutOfSample_", focal_trauma, ".png"),
         plot = heatmap_betavariability_kfold_pvals, width = 1500 / 100, height = 1500 / 100, dpi = 300)



}

#Save work above
setwd('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/')
saveRDS(model_params, 'grandmean_6_9_24_modelparams_REPEATFULLSAMP.RDS')
saveRDS(individual_params, 'grandmean_29_5_25_individparams_REPEATFULLSAMP.RDS')
saveRDS(figures, 'grandmean_6_9_24_figures_REPEATFULLSAMP.RDS')
saveRDS(sex_slopes_per_level, 'grandmean_6_9_24_sex_slopes_per_level_REPEATFULLSAMP.RDS')
saveRDS(hitop_intercepts_per_level, 'grandmean_6_9_24_hitop_intercepts_per_level_REPEATFULLSAMP.RDS')
saveRDS(full_output, 'grandmean_6_9_24_fulloutput_REPEATFULLSAMP.RDS')

individual_params <- readRDS('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/grandmean_29_5_25_individparams_REPEATFULLSAMP.RDS')
sex_slopes_per_level <- readRDS('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/grandmean_6_9_24_sex_slopes_per_level_REPEATFULLSAMP.RDS')
hitop_intercepts_per_level <- readRDS('C:/Users/ctoby/Desktop/PHD Data/NEWEST BEH DATA/grandmean_6_9_24_hitop_intercepts_per_level_REPEATFULLSAMP.RDS')

combined_individual_params <- bind_rows(individual_params)


### BH Correction + Plotting of Simple Slopes ###
str(combined_individual_params)

combined_individual_params <- combined_individual_params %>%
  mutate(BH_Adj_Apply = ifelse(
    Group == "Not Exposed"  |
      grepl('GenT|GriefT|Residual|SES', Predictor) |
      Predictor == 'Age' |
      Predictor == 'Sex' |
      (grepl('Simple Intercept', Predictor) &
         grepl('Male|Female', Predictor) &
         !grepl('with a', Predictor)) |
      (grepl('Intercept', Predictor) & !grepl('Simple Intercept', Predictor)) |
      (grepl('SexTrauma', FocalTrauma) & grepl('PhysViol', Predictor)) |
      (grepl('PhysViol', FocalTrauma) & grepl('SexTrauma', Predictor)),
    '', 'Y'
  )) %>%
  mutate(BH_Adj_Apply = ifelse(
    grepl('Group Differences', Predictor),
    'Y', BH_Adj_Apply
  )) %>%
  group_by(BH_Adj_Apply) %>%
  mutate(PValue = ifelse(
    BH_Adj_Apply == 'Y',
    p.adjust(OriginalPvalue, method = "BH"),
    OriginalPvalue
  )) %>%
  ungroup() %>%
  #dplyr::select(-BH_Adj_Apply) %>%
  as.data.frame() %>%
  mutate(
    Estimate = round(Estimate, 3),
    EstimateUCI = round(EstimateUCI, 3),
    EstimateLCI = round(EstimateLCI, 3),
    StandardError = round(StandardError, 3),
    PValue = round(PValue, 3)
  )



combined_individual_params$Significant <- ifelse(combined_individual_params$PValue <.05, 'Y', 'N')

formatted_params <- combined_individual_params %>%
  mutate(
    Estimate = ifelse(Estimate == 0, '<0.001', sprintf('%.3f', Estimate)),
    EstimateUCI = ifelse(EstimateUCI == 0, '<0.001', sprintf('%.3f', EstimateUCI)),
    EstimateLCI = ifelse(EstimateLCI == 0, '<0.001', sprintf('%.3f', EstimateLCI)),
    StandardError = ifelse(StandardError == 0, '<0.001', sprintf('%.3f', StandardError)),
    PValue = case_when(
      PValue == 0 ~ '<0.001 ***',
      PValue <= 0.001 ~ paste0(sprintf('%.3f', PValue), ' ***'),
      PValue <= 0.01 ~ paste0(sprintf('%.3f', PValue), ' **'),
      PValue <= 0.05 ~ paste0(sprintf('%.3f', PValue), ' *'),
      TRUE ~ sprintf('%.3f', PValue)
    )
  ) %>%
  mutate(PValue = sub("^0\\.", ".", PValue)) %>%
  mutate(PValue = sub("^<0\\.", "<.", PValue))

formatted_params <- data.frame(lapply(formatted_params, as.character), stringsAsFactors = FALSE)

write.csv(formatted_params,"C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANParamFileREPEATFULLSAMPLE.csv")


#Plot simple slopes and intercepts
#We have an interaction for
# Sex on Physical First Age
# Sex on Physical frequency
# First age on phys frequency
# Three way interaction for sexual trauma
# Sex on Sexual Trauma Frequency


#First, group by focal trauma and outcome
combined_individual_params <- combined_individual_params %>%
  group_by(FocalTrauma, Outcome)

#Grab intercepts and slopes for twoway interactions sex:freq
sex_ints_slopes_data <- subset(combined_individual_params, grepl('Male|Female', combined_individual_params$Predictor)  & !grepl('Age', combined_individual_params$Predictor))

str(sex_ints_slopes_data)
mins <- sex_ints_slopes_data %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    min_value = min(as.numeric(Estimate)),
    sd_value = sd(as.numeric(Estimate))
  ) %>%
  mutate(min_adjusted = min_value - sd_value) %>%
  pull(min_adjusted) %>%
  min()

maxs <- sex_ints_slopes_data %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    max_value = max(as.numeric(Estimate)),
    sd_value = sd(Estimate)
  ) %>%
  mutate(max_adjusted = max_value + sd_value) %>%
  pull(max_adjusted) %>%
  min()

sex_slope_interactions <- list()

library(ggplot2)
library(viridis)
library(ggplotify)

for (focal_trauma in unique(sex_ints_slopes_data$FocalTrauma)){

  sex_ints_slopes_data_iteration <- subset(sex_ints_slopes_data, grepl(focal_trauma, sex_ints_slopes_data$FocalTrauma) & !grepl('Age', sex_ints_slopes_data$Predictor))

  for (HiTOP_construct in unique(sex_ints_slopes_data_iteration$Outcome)){

    sex_data_slopes <- subset(sex_ints_slopes_data_iteration, (grepl(focal_trauma, sex_ints_slopes_data_iteration$FocalTrauma) &
                                                                 grepl(HiTOP_construct, sex_ints_slopes_data_iteration$Outcome) &
                                                                 grepl('Slope', sex_ints_slopes_data_iteration$Predictor)))

    sex_data_ints <- subset(sex_ints_slopes_data_iteration, (grepl(focal_trauma, sex_ints_slopes_data_iteration$FocalTrauma) &
                                                               grepl(HiTOP_construct, sex_ints_slopes_data_iteration$Outcome) &
                                                               grepl('Intercept', sex_ints_slopes_data_iteration$Predictor)))

    #Grab Slope info
    slope_beta <- sex_data_slopes$Estimate
    slope_se <- sex_data_slopes$StandardError
    UB <- slope_beta + slope_se
    LB <- slope_beta - slope_se
    Sex <- ifelse(grepl("Male", sex_data_slopes$Predictor), "Male", "Female")
    slope_pval <- sex_data_slopes$PValue

    #Store in a df
    slopes_info<-data.frame(Sex, slope_beta, slope_se, UB, LB, slope_pval)

    #Grab Int info
    slopes_info$intercept_est <- sex_data_ints$Estimate
    slopes_info$intercept_se <- sex_data_ints$StandardError
    slopes_info$intercept_pval <- sex_data_ints$PValue


    slopes_info$Sex <- factor(slopes_info$Sex, levels = c("Male", "Female"))

    slopes_info$SlopeSignificance <- ifelse(slopes_info$slope_pval > 0.05, "Not-significant", "Significant")
    slopes_info$SlopeSignificance <- factor(slopes_info$SlopeSignificance, levels = c("Not-significant", "Significant"))
    slopes_info$InterceptSignificance <-  ifelse(slopes_info$intercept_pval > 0.05, "Not-significant", "Significant")
    slopes_info$InterceptSignificance <- factor(slopes_info$InterceptSignificance, levels = c("Not-significant", "Significant"))

    slopes_info$shape <- ifelse(slopes_info$intercept_pval < 0.05, 16, 1)
    slopes_info$shape <- factor(slopes_info$shape, levels = c(1, 16), labels = c("Not-significant", "Significant"))

    plot_df <- data.frame(x = seq(1, 10), length.out = 100)
    p <- ggplot()

    palette <- head(viridis(4), 2)


    # Add the lines for each group to the plot
    for(i in 1:nrow(slopes_info)) {
      #Line differs based on significance
      line_type <- ifelse(slopes_info$slope_pval[i] > 0.05, "dashed", "solid")
      line_type <- factor(line_type, levels = c("Non-dashed", "solid"))

      plot_df[[paste0(slopes_info$Sex[i])]] <- slopes_info$intercept_est[i] + slopes_info$slope_beta[i]*plot_df$x

      # Compute the upper and lower bounds for the ribbons
      plot_df[[paste0(slopes_info$Sex[i], "_upper")]] <- (slopes_info$intercept_est[i] + slopes_info$slope_beta[i]*plot_df$x) + slopes_info$slope_se[i]
      plot_df[[paste0(slopes_info$Sex[i], "_lower")]] <- (slopes_info$intercept_est[i] + slopes_info$slope_beta[i]*plot_df$x) - slopes_info$slope_se[i]

      str(plot_df)

      # Plot p
      p <- p +
        geom_line(data = plot_df, aes_string(x = "x", y = paste0(slopes_info$Sex[i]), linetype = slopes_info$SlopeSignificance[i], color = slopes_info$Sex[i]), linewidth = 0.8, show.legend=TRUE) +
        geom_ribbon(data = plot_df, aes_string(x = "x", ymin = paste0(slopes_info$Sex[i], "_lower"), ymax = paste0(slopes_info$Sex[i], "_upper"), fill = slopes_info$Sex[i]), alpha = 0.35, show.legend=TRUE) +
        scale_color_manual(values = palette, name = "Sex") +
        scale_fill_manual(values = palette, name = "Sex") +
        scale_linetype_manual(values = c("Not-significant" = "dashed", "Significant" = "solid"), name = "Slope (\u03b2) Significance:", drop = FALSE) +
        theme_minimal() +
        xlim(1, 10) +
        ylim(mins, 2*maxs) +
        scale_x_continuous(limits = c(1, 10), breaks = seq(1, 10, by = 1)) +
        theme(plot.title = element_text(size=12),
              panel.grid.minor = element_blank(),
              panel.grid.major = element_blank(),
              legend.title = element_text(color = "black"),
              legend.text = element_text(color = "black"),
              axis.line = element_line(color = "black"),
              axis.ticks = element_line(color = "black"),
              axis.text = element_text(color = "black"))+
        labs(x = paste0(focal_trauma, " Exposure(s)"), y = paste0(HiTOP_construct), title = paste0(focal_trauma, " Exposure(s) on\n", HiTOP_construct, " by Sex"))



      sex_slope_interactions[[focal_trauma]][[HiTOP_construct]] <- as.ggplot(p)
    }
  }
}

sex_slope_interactions

library(gridExtra)

ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANTwoway_SexonFreq_SimpleSlopesREPEATFULLSAMPLE.png"),
       plot = sex_slope_interactions$`Interpersonal Physical Violence Trauma`$`Antisocial Schizotypy`, width = 1000 / 100, height = 550 / 100, dpi = 300)



#Grab intercepts and slopes for twoway first age : frequency
FirstAge_ints_slopes_data <- subset(combined_individual_params, grepl('First Age', combined_individual_params$Predictor) & !grepl('Sex|Male|Female', combined_individual_params$Predictor))
FirstAge_slope_interactions <- list()

mins <- FirstAge_ints_slopes_data %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    min_value = min(Estimate),
    sd_value = sd(Estimate)
  ) %>%
  mutate(min_adjusted = min_value - sd_value) %>%
  pull(min_adjusted) %>%
  min()

maxs <- FirstAge_ints_slopes_data %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    max_value = max(Estimate),
    sd_value = sd(Estimate)
  ) %>%
  mutate(max_adjusted = max_value + sd_value) %>%
  pull(max_adjusted) %>%
  min()

library(patchwork)

for (focal_trauma in unique(FirstAge_ints_slopes_data$FocalTrauma)){

  FirstAge_ints_slopes_data_iteration <- subset(FirstAge_ints_slopes_data, grepl(focal_trauma, FirstAge_ints_slopes_data$FocalTrauma))

  for (HiTOP_construct in unique(FirstAge_ints_slopes_data$Outcome)){

    FirstAge_data_slopes <- subset(FirstAge_ints_slopes_data_iteration, (grepl(focal_trauma, FirstAge_ints_slopes_data_iteration$FocalTrauma) &
                                                                           grepl(HiTOP_construct, FirstAge_ints_slopes_data_iteration$Outcome) &
                                                                           grepl('Slope', FirstAge_ints_slopes_data_iteration$Predictor)))

    FirstAge_data_ints <- subset(FirstAge_ints_slopes_data_iteration, (grepl(focal_trauma, FirstAge_ints_slopes_data_iteration$FocalTrauma) &
                                                                         grepl(HiTOP_construct, FirstAge_ints_slopes_data_iteration$Outcome) &
                                                                         grepl('Intercept', FirstAge_ints_slopes_data_iteration$Predictor)))
    if (length(unique(FirstAge_data_slopes$Predictor)) >1){
      #Grab Slope info
      slope_beta <- FirstAge_data_slopes$Estimate
      slope_se <- FirstAge_data_slopes$StandardError
      UB <- slope_beta + slope_se
      LB <- slope_beta - slope_se
      FirstAge <- as.character(gsub("Simple Slope for First Age of (\\d+) on.*", "\\1", paste0('Age', FirstAge_data_slopes$Predictor)))
      slope_pval <- FirstAge_data_slopes$PValue

      #Store in a df
      slopes_info<-data.frame(FirstAge, slope_beta, slope_se, UB, LB, slope_pval)

      #Grab Int info
      slopes_info$intercept_est <- FirstAge_data_ints$Estimate
      slopes_info$intercept_se <- FirstAge_data_ints$StandardError
      slopes_info$intercept_pval <- FirstAge_data_ints$PValue


      slopes_info$FirstAge <- as.factor(slopes_info$FirstAge)

      slopes_info$SlopeSignificance <- ifelse(slopes_info$slope_pval > 0.05, "Not-significant", "Significant")
      slopes_info$SlopeSignificance <- factor(slopes_info$SlopeSignificance, levels = c("Not-significant", "Significant"))
      slopes_info$InterceptSignificance <-  ifelse(slopes_info$intercept_pval > 0.05, "Not-significant", "Significant")
      slopes_info$InterceptSignificance <- factor(slopes_info$InterceptSignificance, levels = c("Not-significant", "Significant"))

      slopes_info$shape <- ifelse(slopes_info$intercept_pval < 0.05, 16, 1)
      slopes_info$shape <- factor(slopes_info$shape, levels = c(1, 16), labels = c("Not-significant", "Significant"))

      plot_df <- data.frame(x = seq(1, 10), length.out = 100)
      p <- ggplot()
      palette <- viridis(nrow(slopes_info) +2)

      plot_text <- list()

      # Add the lines for each group to the plot
      for(i in 1:nrow(slopes_info)) {
        # Determine line type based on significance
        line_type <- ifelse(slopes_info$slope_pval[i] > 0.05, "dashed", "solid")
        line_type <- factor(line_type, levels = c("Non-dashed", "solid"))

        # Compute the line for this group
        plot_df[[paste0(slopes_info$FirstAge[i])]] <- slopes_info$intercept_est[i] + slopes_info$slope_beta[i]*plot_df$x

        # Compute the upper and lower bounds for the ribbons
        plot_df[[paste0(slopes_info$FirstAge[i], "_upper")]] <- (slopes_info$intercept_est[i] + slopes_info$slope_beta[i]*plot_df$x) + slopes_info$slope_se[i]
        plot_df[[paste0(slopes_info$FirstAge[i], "_lower")]] <- (slopes_info$intercept_est[i] + slopes_info$slope_beta[i]*plot_df$x) - slopes_info$slope_se[i]

        p <- p +
          geom_line(data = plot_df, aes_string(x = "x", y = paste0(slopes_info$FirstAge[i]), linetype = slopes_info$SlopeSignificance[i], color = slopes_info$FirstAge[i]), linewidth = 0.8, show.legend=TRUE) +
          geom_ribbon(data = plot_df, aes_string(x = "x", ymin = paste0(slopes_info$FirstAge[i], "_lower"), ymax = paste0(slopes_info$FirstAge[i], "_upper"), fill = slopes_info$FirstAge[i]), alpha = 0.2, show.legend=TRUE) +
          scale_color_manual(values = palette, name = "Age of Onset") + # Add this line to set line color
          scale_fill_manual(values = palette, name = "Age of Onset") +
          scale_linetype_manual(values = c("Not-significant" = "dashed", "Significant" = "solid"), name = "Slope (\u03b2) Significance:", drop=F) +
          theme_minimal() +
          #ylim(mins, 2*maxs) +
          xlim(1, 10) +
          scale_x_continuous(limits = c(1, 10), breaks = seq(1, 10, by = 1)) +
          theme(axis.line = element_line(size = 0.5, colour = 'black'),
                panel.grid.major = element_blank(),
                panel.grid.minor = element_blank()) +
          labs(x = paste0(focal_trauma, " Exposure(s)"), y = paste0(HiTOP_construct), title=paste0('I) ', focal_trauma, " Exposure(s) on \n", HiTOP_construct, " by Age of Onset"))

        slopes_info$FirstAge <- factor(slopes_info$FirstAge, levels=unique(as.character(slopes_info$FirstAge)) )

        int_p <- ggplot() +
          geom_point(data = slopes_info, aes(x = FirstAge, y = intercept_est, color = FirstAge, shape = shape), size = 5, show.legend = TRUE) +
          geom_errorbar(data = slopes_info, aes(x = FirstAge, ymin = intercept_est - intercept_se, ymax = intercept_est + intercept_se, color = FirstAge), width = 0.2, show.legend = TRUE) +
          theme_minimal() +
          geom_point(shape = 1,size = 5,colour = "black") +
          scale_color_manual(values = palette, name = "Age of Onset") +
          scale_shape_manual(values = c("Not-significant" = 1, "Significant" = 16), name = "Significance", drop = FALSE) +
          labs(
            title = paste0("II) Effect at One Exposure per Age of Onset"),
            x = "Age of Onset",
            y = paste(HiTOP_construct)
          ) +
          #ylim(mins, (2*maxs)) +
          theme(
            plot.title = element_text(),
            panel.grid.minor = element_blank(),
            panel.grid.major = element_blank(),
            legend.title = element_text(color = "black"),
            legend.text = element_text(color = "black"),
            axis.line = element_line(color = "black"),
            axis.ticks = element_line(color = "black"),
            axis.text = element_text(color = "black")
          )

        if (HiTOP_construct == 'Detach'){
          int_p <- int_p + theme(legend.position = "none")
          p <- p + theme(legend.position = "none")
        }


        p_combined <- p /int_p
        FirstAge_slope_interactions[[focal_trauma]][[HiTOP_construct]] <- as.ggplot(p_combined)
      }
    }
  }
}

FirstAge_slope_interactions

ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANTwoway_FirstAgeonFreq_SimpleSlopesREPEATFULLSAMPLE.png"),
       plot = FirstAge_slope_interactions$`Interpersonal Physical Violence Trauma`$`Antisocial Schizotypy`, width = 1000 / 100, height = 550 / 100, dpi = 300)




#Grab intercepts and slopes for twoway interactions sex:firstage
sex_ints_slopes_data_on_firstage <- subset(combined_individual_params, grepl('given', combined_individual_params$Predictor))
sex_slope_interactions_on_firstage <- list()


mins <- sex_ints_slopes_data_on_firstage %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    min_value = min(Estimate),
    sd_value = sd(Estimate)
  ) %>%
  mutate(min_adjusted = min_value - sd_value) %>%
  pull(min_adjusted) %>%
  min()

maxs <- sex_ints_slopes_data_on_firstage %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    max_value = max(Estimate),
    sd_value = sd(Estimate)
  ) %>%
  mutate(max_adjusted = max_value + sd_value) %>%
  pull(max_adjusted) %>%
  min()

for (focal_trauma in unique(sex_ints_slopes_data_on_firstage$FocalTrauma)){

  sex_ints_slopes_data_on_firstage_iteration <- subset(sex_ints_slopes_data_on_firstage, grepl(focal_trauma, sex_ints_slopes_data_on_firstage$FocalTrauma))

  for (HiTOP_construct in unique(sex_ints_slopes_data_on_firstage_iteration$Outcome)){

    sex_data_slopes <- subset(sex_ints_slopes_data_on_firstage_iteration, (grepl(focal_trauma, sex_ints_slopes_data_on_firstage_iteration$FocalTrauma) &
                                                                             grepl(HiTOP_construct, sex_ints_slopes_data_on_firstage_iteration$Outcome) &
                                                                             grepl('Slope', sex_ints_slopes_data_on_firstage_iteration$Predictor)))

    sex_data_ints <- subset(sex_ints_slopes_data_on_firstage_iteration, (grepl(focal_trauma, sex_ints_slopes_data_on_firstage_iteration$FocalTrauma) &
                                                                           grepl(HiTOP_construct, sex_ints_slopes_data_on_firstage_iteration$Outcome) &
                                                                           grepl('Intercept', sex_ints_slopes_data_on_firstage_iteration$Predictor)))

    #Grab Slope info
    slope_beta <- sex_data_slopes$Estimate
    slope_se <- sex_data_slopes$StandardError
    UB <- slope_beta + slope_se
    LB <- slope_beta - slope_se
    FirstAge <- paste0("Age", gsub(".*\\s", "", sex_data_slopes$Predictor))
    slope_pval <- sex_data_slopes$PValue

    #Store in a df
    slopes_info<-data.frame(FirstAge, slope_beta, slope_se, UB, LB, slope_pval)

    #Grab Int info
    slopes_info$intercept_est <- sex_data_ints$Estimate
    slopes_info$intercept_se <- sex_data_ints$StandardError
    slopes_info$intercept_pval <- sex_data_ints$PValue


    slopes_info$FirstAge <- as.factor(slopes_info$FirstAge)

    slopes_info$SlopeSignificance <- ifelse(slopes_info$slope_pval > 0.05, "Not-significant", "Significant")
    slopes_info$SlopeSignificance <- factor(slopes_info$SlopeSignificance, levels = c("Not-significant", "Significant"))
    slopes_info$InterceptSignificance <-  ifelse(slopes_info$intercept_pval > 0.05, "Not-significant", "Significant")
    slopes_info$InterceptSignificance <- factor(slopes_info$InterceptSignificance, levels = c("Not-significant", "Significant"))

    slopes_info$shape <- ifelse(slopes_info$intercept_pval < 0.05, 16, 1)
    slopes_info$shape <- factor(slopes_info$shape, levels = c(1, 16), labels = c("Not-significant", "Significant"))
    palette <- viridis(nrow(slopes_info) +2)

    slopes_info$FirstAge <- factor(slopes_info$FirstAge, levels = c("Age6", "Age10", "Age12", "Age16", "Age25"))

    p <- ggplot() +
          geom_point(data = slopes_info, aes(x = FirstAge, y = slope_beta, color = FirstAge, shape = SlopeSignificance), size = 5, show.legend = TRUE) +
          geom_errorbar(data = slopes_info, aes(x = FirstAge, ymin = slope_beta - slope_se, ymax = slope_beta + slope_se, color = FirstAge), width = 0.2, show.legend = TRUE) +
          theme_minimal() +
          geom_point(shape = 1,size = 5,colour = "black") +
          scale_color_manual(values = palette, name = "Age of Onset") +
          scale_shape_manual(values = c("Not-significant" = 1, "Significant" = 16), name = "Significance", drop = FALSE) +
          labs(
            title = paste0('I) ', focal_trauma, " Age of Onset Effects\nby Sex for ", HiTOP_construct),
            subtitle = '(Positive Effects = Female Bias)',
            x = "Age of Onset",
            y = paste(HiTOP_construct)
          ) +
          #ylim(mins, (2*maxs)) +
          theme(
            plot.title = element_text(),
            plot.subtitle = element_text(),
            panel.grid.minor = element_blank(),
            panel.grid.major = element_blank(),
            legend.title = element_text(color = "black"),
            legend.text = element_text(color = "black"),
            axis.line = element_line(color = "black"),
            axis.ticks = element_line(color = "black"),
            axis.text = element_text(color = "black")
    )

    int_p <- ggplot() +
          geom_point(data = slopes_info, aes(x = FirstAge, y = intercept_est, color = FirstAge, shape = shape), size = 5, show.legend = F) +
          geom_errorbar(data = slopes_info, aes(x = FirstAge, ymin = intercept_est - intercept_se, ymax = intercept_est + intercept_se, color = FirstAge), width = 0.2, show.legend = F) +
          theme_minimal() +
          geom_point(shape = 1,size = 5,colour = "black") +
          scale_color_manual(values = palette, name = "FirstAge") +
          scale_shape_manual(values = c("Not-significant" = 1, "Significant" = 16), name = "Significance", drop = F) +
          labs(
            title = paste0("II) Effect at One Exposure per Age of Onset\nRegardless of Sex"),
            x = "Age of Onset",
            y = paste(HiTOP_construct)
          ) +
          #ylim(mins, (2*maxs)) +
          theme(
            plot.title = element_text(),
            panel.grid.minor = element_blank(),
            panel.grid.major = element_blank(),
            legend.title = element_text(color = "black"),
            legend.text = element_text(color = "black"),
            axis.line = element_line(color = "black"),
            axis.ticks = element_line(color = "black"),
            axis.text = element_text(color = "black")
      )


      p_combined <- p /int_p
      FirstAge_slope_interactions[[focal_trauma]][[HiTOP_construct]] <- as.ggplot(p_combined)
  }
}

FirstAge_slope_interactions$`Interpersonal Physical Violence Trauma`$`Negative Affectivity`

ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANTwoway_SexonFirstAge_SimpleSlopesREPEATFULLSAMPLE.png"),
       plot = FirstAge_slope_interactions$`Interpersonal Physical Violence Trauma`$`Negative Affectivity`, width = 1000 / 100, height = 550 / 100, dpi = 300)


library(rlang)
#Grab intercepts and slopes for THREEWAY interactions dose:sex:firstage
threeway_data <- subset(combined_individual_params, grepl('Male|Female', combined_individual_params$Predictor)  & grepl('Age', combined_individual_params$Predictor)
                        & grepl('of', combined_individual_params$Predictor))
threeway_data_interactions <- list()

mins <- threeway_data %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    min_value = min(Estimate),
    sd_value = sd(Estimate)
  ) %>%
  mutate(min_adjusted = min_value - sd_value) %>%
  pull(min_adjusted) %>%
  min()

maxs <- threeway_data %>%
  filter(grepl('Intercept', Predictor)) %>%
  summarise(
    max_value = max(Estimate),
    sd_value = 2*sd(Estimate)
  ) %>%
  mutate(max_adjusted = max_value + sd_value) %>%
  pull(max_adjusted) %>%
  min()

for (focal_trauma in unique(threeway_data$FocalTrauma)){
  threeway_data_iteration <- subset(threeway_data, grepl(focal_trauma, threeway_data$FocalTrauma))

  for (HiTOP_construct in unique(threeway_data$Outcome)){

    threeway_slopes <- subset(threeway_data_iteration, (grepl(focal_trauma, threeway_data_iteration$FocalTrauma) &
                                                          grepl(HiTOP_construct, threeway_data_iteration$Outcome) &
                                                          grepl('Slope', threeway_data_iteration$Predictor)))

    threeway_ints <- subset(threeway_data_iteration, (grepl(focal_trauma, threeway_data_iteration$FocalTrauma) &
                                                        grepl(HiTOP_construct, threeway_data_iteration$Outcome) &
                                                        grepl('Intercept', threeway_data_iteration$Predictor)))

    #Grab Slope info
    slope_beta <- threeway_slopes$Estimate
    slope_se <- threeway_slopes$StandardError
    UB <- slope_beta + slope_se
    LB <- slope_beta - slope_se
    Sex <- ifelse(grepl("Male", threeway_slopes$Predictor), "Male", "Female")
    slope_pval <- threeway_slopes$PValue
    FirstAge <- as.numeric(gsub(".*First Age of (\\d+) on.*", "\\1", threeway_slopes$Predictor))

    #Store in a df
    slopes_info<-data.frame(Sex, slope_beta, slope_se, UB, LB, slope_pval, FirstAge)

    #Grab Int info
    slopes_info$intercept_est <- threeway_ints$Estimate
    slopes_info$intercept_se <- threeway_ints$StandardError
    slopes_info$intercept_pval <- threeway_ints$PValue


    slopes_info$Sex <- as.factor(slopes_info$Sex)

    slopes_info$SlopeSignificance <- ifelse(slopes_info$slope_pval > 0.05, "Not-significant", "Significant")
    slopes_info$SlopeSignificance <- factor(slopes_info$SlopeSignificance, levels = c("Not-significant", "Significant"))
    slopes_info$InterceptSignificance <-  ifelse(slopes_info$intercept_pval > 0.05, "Not-significant", "Significant")
    slopes_info$InterceptSignificance <- factor(slopes_info$InterceptSignificance, levels = c("Not-significant", "Significant"))

    slopes_info$shape <- ifelse(slopes_info$intercept_pval < 0.05, 16, 1)
    slopes_info$shape <- factor(slopes_info$shape, levels = c(1, 16), labels = c("Not-significant", "Significant"))

    slopes_info <- slopes_info[order(slopes_info$FirstAge), ]

    plot_df <- data.frame(x = seq(1, 10, length.out = 100))
    p <- ggplot()

    plot_text <- list()


    for (Sex_Iter in c('Male', 'Female')) {

      slopes_info_subset <- subset(slopes_info, Sex == Sex_Iter)
      palette <- head(viridis(nrow(slopes_info_subset) + 1), 5)

      slopes_info_subset$FirstAge <- factor(slopes_info_subset$FirstAge, levels=unique(as.character(slopes_info_subset$FirstAge)) )
      int_p <- ggplot() +
        geom_point(data = slopes_info_subset, aes(x = FirstAge, y = intercept_est, color = FirstAge, shape = shape), size = 5, show.legend = TRUE) +
        geom_errorbar(data = slopes_info_subset, aes(x = FirstAge, ymin = intercept_est - intercept_se, ymax = intercept_est + intercept_se, color = FirstAge), width = 0.2, show.legend = TRUE) +
        theme_minimal() +
        geom_point(shape = 1,size = 5,colour = "black") +
        scale_color_manual(values = palette, name = "Age of Onset") +
        scale_shape_manual(values = c("Not-significant" = 1, "Significant" = 16), name = "Significance", drop = FALSE) +
        labs(
          title = paste0("II) Effect at One Exposure"),
          x = "Age of Onset",
          y = paste(HiTOP_construct)
        ) +
        ylim(3*mins, maxs) +
        theme(
          plot.title = element_text(),
          panel.grid.minor = element_blank(),
          panel.grid.major = element_blank(),
          legend.title = element_text(color = "black"),
          legend.text = element_text(color = "black"),
          axis.line = element_line(color = "black"),
          axis.ticks = element_line(color = "black"),
          axis.text = element_text(color = "black")
        )

      # Create a named color palette for the FirstAge values
      color_palette <- setNames(palette, unique(slopes_info_subset$FirstAge))

      # Empty list to store data for each line
      plot_data_list <- list()

      for (i in 1:nrow(slopes_info_subset)) {

        # Compute the lines and ribbons
        line_name <- as.character(slopes_info_subset$FirstAge[i])
        plot_df[[line_name]] <- slopes_info_subset$intercept_est[i] + slopes_info_subset$slope_beta[i] * plot_df$x
        plot_df[[paste0(line_name, "_upper")]] <- (slopes_info_subset$intercept_est[i] + slopes_info_subset$slope_beta[i] * plot_df$x) + slopes_info_subset$slope_se[i]
        plot_df[[paste0(line_name, "_lower")]] <- (slopes_info_subset$intercept_est[i] + slopes_info_subset$slope_beta[i] * plot_df$x) - slopes_info_subset$slope_se[i]

        # Define the color for the current FirstAge
        color_for_age <- color_palette[line_name]

        # Append each line’s data to the list
        plot_data_list[[i]] <- data.frame(
          x = plot_df$x,
          y = plot_df[[line_name]],
          ymin = plot_df[[paste0(line_name, "_lower")]],
          ymax = plot_df[[paste0(line_name, "_upper")]],
          color = line_name,
          fill = line_name,
          linetype = slopes_info_subset$SlopeSignificance[i]
        )
      }

      # Combine all plot data into a single data frame
      combined_plot_df <- bind_rows(plot_data_list)
      combined_plot_df$color <- factor(combined_plot_df$color, levels=unique(as.character(combined_plot_df$color)) )
      combined_plot_df$fill <- factor(combined_plot_df$fill, levels=unique(as.character(combined_plot_df$fill)) )

      # Plot
      p <- ggplot(combined_plot_df, aes(x = x, color = color, fill = fill, linetype = linetype, , show.legend=TRUE)) +
        geom_line(aes(y = y), linewidth = 0.8, , show.legend=TRUE) +
        geom_ribbon(aes(ymin = ymin, ymax = ymax), alpha = 0.35, color = NA, show.legend=TRUE) +  # Set color to NA to avoid border lines
        scale_color_manual(values = color_palette, name = "Age of Onset") +
        scale_fill_manual(values = color_palette, name = "Age of Onset") +
        scale_linetype_manual(values = c("Not-significant" = "dashed", "Significant" = "solid"),
                              name = "Slope (\u03b2s) Significance:", , drop=F) +
        theme_minimal() +
        xlim(1, 10) +
        ylim(3*mins, 3*maxs) +
        scale_x_continuous(limits = c(1, 10), breaks = seq(1, 10, by = 1)) +
        theme(axis.line = element_line(size = 0.5, colour = 'black'),
              panel.grid.major = element_blank(),
              panel.grid.minor = element_blank()) +
        labs(x = paste0(focal_trauma, " Exposure(s)"),
             y = paste0(HiTOP_construct),
             title = paste0('I) ', focal_trauma, " Exposure(s) on ", HiTOP_construct, "\nAccording to Age of Onset in ", Sex_Iter, "s"))

      if (Sex_Iter != c('Female')) {
        int_p <- int_p + theme(legend.position = "none")
        p <- p + theme(legend.position = "none")
      }

      threeway_data_interactions[[focal_trauma]][[HiTOP_construct]][[Sex_Iter]] <- as.ggplot(p/int_p)
      p <- ggplot()
    }
  }
}

label_A <- textGrob("A", x = unit(0.25, "npc"), y = unit(0.98, "npc"),
                    just = c("center", "top"),
                    gp = gpar(fontsize = 14, fontface = "bold"))
label_B <- textGrob("B", x = unit(0.75, "npc"), y = unit(0.98, "npc"),
                    just = c("center", "top"),
                    gp = gpar(fontsize = 14, fontface = "bold"))

combined_plot <- grid.arrange(
  threeway_data_interactions$`Sexual Trauma`$`Negative Affectivity`$Male,
  threeway_data_interactions$`Sexual Trauma`$`Negative Affectivity`$Female,
  ncol = 2,
  top = grobTree(label_A, label_B)
)

ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/ThreeWayInteractionsREPEATFULLSAMPLE.png"),
       plot = combined_plot, width = 1400 / 100, height = 550 / 100, dpi = 300)


### NOW for Comparing Slopes of Sex and Intercepts between Groups

HiTOP_construct_sexslope_differences <- subset(combined_individual_params, grepl("Slope of Sex", Predictor))
HiTOP_construct_sexslope_differences$Outcome <- str_remove(HiTOP_construct_sexslope_differences$Predictor, ".*Slope of Sex on ")

HiTOP_construct_intercept_differences <- subset(combined_individual_params, grepl("Group Differences", Predictor) & !grepl("Slope of Sex", Predictor))
HiTOP_construct_intercept_differences$Outcome <- str_remove(HiTOP_construct_intercept_differences$Predictor, ".* for ")

sex_slopes_per_level$`Sexual Trauma` <- sex_slopes_per_level$SexTrauma
sex_slopes_per_level$`Interpersonal Physical Violence Trauma` <- sex_slopes_per_level$PhysViol

hitop_intercepts_per_level$`Sexual Trauma` <- hitop_intercepts_per_level$SexTrauma
hitop_intercepts_per_level$`Interpersonal Physical Violence Trauma` <- hitop_intercepts_per_level$PhysViol

plots <- list()
library(ggpattern)
for (traumatype in c('Sexual Trauma', 'Interpersonal Physical Violence Trauma')){
  #For sex slopes
  subsetted_HiTOP_construct_sexslope_differences <- subset(HiTOP_construct_sexslope_differences, FocalTrauma == traumatype)
  subsetted_sex_slopes_per_level <- as.data.frame(sex_slopes_per_level[[traumatype]])
  subsetted_sex_slopes_per_level$BenHochAdjDiffTest <- subsetted_HiTOP_construct_sexslope_differences$PValue[match(subsetted_sex_slopes_per_level$lhs, subsetted_HiTOP_construct_sexslope_differences$Outcome)]
  subsetted_sex_slopes_per_level$StandardErrorDiffTest <- subsetted_HiTOP_construct_sexslope_differences$StandardError[match(subsetted_sex_slopes_per_level$lhs, subsetted_HiTOP_construct_sexslope_differences$Outcome)]
  subsetted_sex_slopes_per_level$EstimateDiffTest <- subsetted_HiTOP_construct_sexslope_differences$Estimate[match(subsetted_sex_slopes_per_level$lhs, subsetted_HiTOP_construct_sexslope_differences$Outcome)]

  #Round
  subsetted_sex_slopes_per_level[] <- lapply(subsetted_sex_slopes_per_level, function(x) if(is.numeric(x)) round(x, 3) else x)

  #Add*if the std est is significant
  subsetted_sex_slopes_per_level <- subsetted_sex_slopes_per_level %>%
    mutate(
      EstimateDiffTest = as.numeric(sprintf('%.3f', EstimateDiffTest)),
      StandardErrorDiffTest = as.numeric(sprintf('%.3f', abs(StandardErrorDiffTest))),
      BenHochAdjDiffTest = as.numeric(sprintf('%.3f', BenHochAdjDiffTest))
    ) %>%
    mutate(
      Description = ifelse(
        BenHochAdjDiffTest < .001,
        paste0(
          '\u03b2=', sprintf('%.3f', EstimateDiffTest),
          "\nSE=", sprintf('%.3f', abs(StandardErrorDiffTest)),
          "\np=<.001",
          ' *'
        ),
        ifelse(
          BenHochAdjDiffTest < .05 & BenHochAdjDiffTest > .001,
          paste0(
            '\u03b2=', sprintf('%.3f', EstimateDiffTest),
            "\nSE=", sprintf('%.3f', abs(StandardErrorDiffTest)),
            "\np=", sub("^0+", "", sprintf('%.3f', BenHochAdjDiffTest)),
            ' *'
          ),
          paste0(
            '\u03b2=', sprintf('%.3f', EstimateDiffTest),
            "\nSE=", sprintf('%.3f', abs(StandardErrorDiffTest)),
            "\np=", sub("^0+", "", sprintf('%.3f', BenHochAdjDiffTest))
          )
        )
      )
    )

  custom_palette <- c("#440154", "#453781", "#21918C", "#55C667FF", '#B8DE29FF')

  subsetted_sex_slopes_per_level_filtered <- subsetted_sex_slopes_per_level %>%
    group_by(lhs) %>%
    filter(est.std == max(est.std))

  if (traumatype == 'Interpersonal Physical Violence Trauma') {
    y_tick_labels <- element_blank()
  } else {
    y_tick_labels <- element_text()  # You can also specify other properties here if needed
  }
  ggplot_group_sexslope_comparisons <- ggplot(subsetted_sex_slopes_per_level, aes(x = lhs, y = est.std, shape = factor(group))) +
    geom_point(
      aes(color = lhs),
      size = 3,
      position = position_dodge(0.9),
      alpha = 0.8,
      stroke = 0.5
    ) +
    ylim(-.5, 1.0) +
    geom_errorbar(aes(ymin = est.std - se, ymax = est.std + se, color = lhs), width = 0.2, position = position_dodge(0.9)) +
    geom_text(data = subsetted_sex_slopes_per_level_filtered,
              aes(label = Description, y = .75),
              vjust = 1,
              size = 3,
              color = "black",
              position = position_dodge(0.9)) +
    geom_hline(yintercept = 0) +
    scale_shape_manual(values = c(1, 16), # 16 is circle, 15 is square
                       name = "Exposure Status",
                       labels = c("Not Exposed", "Exposed")) +
    scale_color_manual(values = custom_palette, guide='none') + # Remove legend for point color
    labs(x = "", y = ifelse(traumatype == 'Sexual Trauma',"\nSex Effect (\u03b2)",''), title = "II)") +
    theme_minimal() +
    theme(
      legend.position = ('bottom'),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = "white"),
      axis.line = element_line(color = "black"),
      axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
      axis.text.y = y_tick_labels
    ) +
    geom_vline(xintercept = seq(1.5, length(unique(subsetted_sex_slopes_per_level$lhs)) - 0.5, by = 1), color = "grey")+
    guides(shape = "none")


  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANGroupSexSlopeDiffsFor", traumatype, "REPEATFULLSAMPLE.png"),
         plot = ggplot_group_sexslope_comparisons, width = 1500 / 100, height = 600 / 100, dpi = 300)


  #For intercepts
  subsetted_HiTOP_construct_intercept_differences <- subset(HiTOP_construct_intercept_differences, FocalTrauma == traumatype)
  subsetted_intercepts_per_level <- as.data.frame(hitop_intercepts_per_level[[traumatype]])
  subsetted_intercepts_per_level$BenHochAdjDiffTest <- subsetted_HiTOP_construct_intercept_differences$PValue[match(subsetted_intercepts_per_level$lhs, HiTOP_construct_intercept_differences$Outcome)]
  subsetted_intercepts_per_level$StandardErrorDiffTest <- subsetted_HiTOP_construct_intercept_differences$StandardError[match(subsetted_intercepts_per_level$lhs, HiTOP_construct_intercept_differences$Outcome)]
  subsetted_intercepts_per_level$EstimateDiffTest <- subsetted_HiTOP_construct_intercept_differences$Estimate[match(subsetted_intercepts_per_level$lhs, HiTOP_construct_intercept_differences$Outcome)]

  #Round
  subsetted_intercepts_per_level[] <- lapply(subsetted_intercepts_per_level, function(x) if(is.numeric(x)) round(x, 3) else x)

  #Add*if the std est is significant
  subsetted_intercepts_per_level <- subsetted_intercepts_per_level %>%
    mutate(
      EstimateDiffTest = as.numeric(sprintf('%.3f', EstimateDiffTest)),
      StandardErrorDiffTest = as.numeric(sprintf('%.3f', abs(StandardErrorDiffTest))),
      BenHochAdjDiffTest = as.numeric(sprintf('%.3f', BenHochAdjDiffTest))
    ) %>%
    mutate(
      Description = ifelse(
        BenHochAdjDiffTest < .001,
        paste0(
          '\u03b2=', sprintf('%.3f', EstimateDiffTest),
          "\nSE=", sprintf('%.3f', abs(StandardErrorDiffTest)),
          "\np<.001",
          ' *'
        ),
        ifelse(
          BenHochAdjDiffTest < .05 & BenHochAdjDiffTest > .001,
          paste0(
            '\u03b2=', sprintf('%.3f', EstimateDiffTest),
            "\nSE=", sprintf('%.3f', abs(StandardErrorDiffTest)),
            "\np=", sub("^0+", "", sprintf('%.3f', BenHochAdjDiffTest)),
            ' *'
          ),
          paste0(
            '\u03b2=', sprintf('%.3f', EstimateDiffTest),
            "\nSE=", sprintf('%.3f', abs(StandardErrorDiffTest)),
            "\np=", sub("^0+", "", sprintf('%.3f', BenHochAdjDiffTest))
          )
        )
      )
    )



  subsetted_intercepts_per_level_filtered <- subsetted_intercepts_per_level %>%
    group_by(lhs) %>%
    filter(est.std == max(est.std))

  ggplot_group_intercept_comparisons <- ggplot(subsetted_intercepts_per_level, aes(x = lhs, y = est.std, shape = factor(group))) +
    geom_point(
      aes(color = lhs),
      size = 3,
      position = position_dodge(0.9),
      alpha = 0.8,
      stroke = 0.5
    ) +
    geom_errorbar(aes(ymin = est.std - se, ymax = est.std + se, color = lhs), width = 0.2, position = position_dodge(0.9)) +
    geom_text(data = subsetted_intercepts_per_level_filtered,
              aes(label = Description, y = .75),
              vjust = 1,
              size = 3,
              color = "black",
              position = position_dodge(0.9)) +
    geom_hline(yintercept = 0) +
    ylim(-.5, 1.0) +
    scale_shape_manual(values = c(1, 16), # 16 is circle, 15 is square
                       name = "Exposure Status",
                       labels = ifelse(traumatype == 'Sexual Trauma',
                                       c("Not Exposed", "Exposed"),
                                       c("None", "None"))) +
    scale_color_manual(values = custom_palette, guide='none') + # Remove legend for point color
    labs(x = "", y = ifelse(traumatype == 'Sexual Trauma',"Psychopathology Severity\n(Group Intercept)", ''), title = "I)") +
    theme_minimal() +
    theme(
      legend.position = 'none',
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank(),
      panel.background = element_rect(fill = "white"),
      axis.line = element_line(color = "black"),
      axis.text.x = element_blank(),
      axis.text.y = y_tick_labels
    ) +
    geom_vline(xintercept = seq(1.5, length(unique(subsetted_intercepts_per_level$lhs)) - 0.5, by = 1), color = "grey") +
    guides(shape = "none")


  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANGroupInterceptDiffsFor", traumatype, "REPEATFULLSAMPLE.png"),
         plot = ggplot_group_intercept_comparisons, width = 1000 / 100, height = 900 / 100, dpi = 300)


  combined_plot <- grid.arrange(
    ggplot_group_intercept_comparisons,
    ggplot_group_sexslope_comparisons,
    nrow = 2
  )

  ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANCombinedGroupDiffs", traumatype, "REPEATFULLSAMPLE.png"),
         plot = combined_plot, width = 1000 / 100, height = 1000 / 100, dpi = 300)

  plots[[traumatype]] <- combined_plot
}

#Create a dummy plot to incl the shape legend

dummy_data <- data.frame(
  Group = factor(c("Exposed", "Not Exposed")),
  x = c(1, 2),  # Arbitrary values just to create the legend
  y = c(1, 2)
)

dummy_plot <- ggplot(dummy_data, aes(x = x, y = y, shape = Group)) +
  geom_point(size = 3) +  # Visible points to trigger the legend
  scale_shape_manual(
    name = "Group",
    values = c(1, 16),  # Circle for "Exposed", Square for "Not Exposed"
    labels = c("Not Exposed", "Exposed")  # Custom labels
  ) +
  theme(
    legend.position = "bottom",
    panel.background = element_rect(fill = "white", color = NA),  # White panel background
    plot.background = element_rect(fill = "white", color = NA)  # White plot background
  )
library(patchwork)
legend <- get_legend(dummy_plot)
combined_plot <- (as.ggplot(plots$`Sexual Trauma`) +
                    labs(title = "A", subtitle = "Sexual Trauma") +
                    theme(
                      plot.title = element_text(face = "bold", size = 14),
                      plot.subtitle = element_text(size = 12),
                      legend.position = "none"
                    )) |
  (as.ggplot(plots$`Interpersonal Physical Violence Trauma`) +
     labs(title = "B", subtitle = "Interpersonal Physical Violence Trauma") +
     theme(
       plot.title = element_text(face = "bold", size = 14),
       plot.subtitle = element_text(size = 12),
       legend.position = "none"
     ))

# Combine plots and add legend made with dummy above
final_plot <- combined_plot / legend + plot_layout(heights = c(10, 1))


final_plot
ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GroupDiffs.png"),
       plot = final_plot, width = 981 / 100, height = 800 / 100, dpi = 300)

#Save plots together

label_A <- textGrob("A", x = unit(0.17, "npc"), y = unit(1, "npc"), just = c("left", "top"), gp = gpar(fontsize = 18, fontface = "bold"))
label_B <- textGrob("B", x = unit(0.5, "npc"), y = unit(1, "npc"), just = c("left", "top"), gp = gpar(fontsize = 18, fontface = "bold"))
label_C <- textGrob("C", x = unit(0.83, "npc"), y = unit(1, "npc"), just = c("left", "top"), gp = gpar(fontsize = 18, fontface = "bold"))

IPVT_combined_plot <- grid.arrange(
  arrangeGrob(
    sex_slope_interactions$`Interpersonal Physical Violence Trauma`$`Antisocial Schizotypy`,
    FirstAge_slope_interactions$`Interpersonal Physical Violence Trauma`$`Antisocial Schizotypy`,
    FirstAge_slope_interactions$`Interpersonal Physical Violence Trauma`$`Negative Affectivity`,
    ncol = 3
  ),
  top = grobTree(label_A, label_B, label_C)
)
ggsave(paste0("C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/IPVT_combined_plot.png"),
       plot = IPVT_combined_plot, width = 2800 / 100, height = 800 / 100, dpi = 300)


model_params <- bind_rows(model_params)
write.csv(combined_individual_params,"C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANParamFileREPEATFULLSAMPLE.csv")
write.csv(bind_rows(model_params),"C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANOverallModelStatsREPEATFULLSAMPLE.csv")
write.csv(bind_rows(full_output),"C:/Users/ctoby/Desktop/PHD Data/Chapter 1/Publication/GRANDMEANFullOutputREPEATFULLSAMPLE.csv")

combined_individual_params

#### end ####
